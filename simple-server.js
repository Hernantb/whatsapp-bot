const express = require('express');
const axios = require('axios');
const app = express();
const PORT = 3095;
const nodemailer = require('nodemailer');
const fs = require('fs');

// Obtener credenciales desde variables de entorno
const GUPSHUP_API_KEY = process.env.GUPSHUP_API_KEY || 'sk_58a31041fdeb4d98b9f0e073792a6e6b';
const GUPSHUP_NUMBER = process.env.GUPSHUP_SOURCE_PHONE || '15557033313';
const GUPSHUP_USERID = process.env.GUPSHUP_USERID || 'crxty1qflktvwvm7sodtrfe9dpvoowm1';
const EMAIL_USER = process.env.EMAIL_USER || 'bexorai@gmail.com';
const EMAIL_PASSWORD = process.env.EMAIL_PASSWORD || 'gqwiakerjgrnkylf';
const BCC_EMAIL = process.env.BCC_EMAIL || 'copia@brexor.com';
const NOTIFICATION_EMAIL = process.env.NOTIFICATION_EMAIL || 'joaquinisaza@hotmail.com';

// Frases del bot que indican una solicitud confirmada que requiere notificaci√≥n
const botConfirmationPhrases = [
  // Solicitud de asistencia humana
  "he registrado tu solicitud para hablar con un asesor",
  "un representante se pondr√° en contacto contigo",
  
  // Confirmaci√≥n de cita
  "tu cita ha sido agendada para",
  "hemos registrado tu cita para el d√≠a",
  "cita confirmada para el",
  "cita para", 
  "calendly",
  "agendar cita",
  "link donde podr√°s registrarla",
  
  // Solicitud de llamada
  "te llamaremos pronto al n√∫mero",
  "hemos registrado tu solicitud de llamada",
  "recibir√°s una llamada en",
  
  // Seguimiento
  "daremos seguimiento a tu caso",
  "caso registrado con el folio",
  
  // Nuevas frases de confirmaci√≥n (2025)
  "¬°Perfecto! tu cita ha sido confirmada para",
  "¬°Perfecto! un asesor te llamar√°",
  "¬°Perfecto! un asesor te contactar√°",
  "¬°Perfecto! una persona te contactar√°",
  "¬°Perfecto! Un asesor te llamar√° hoy a las",
  "¬°Perfecto! un asesor te llamar√° ma√±ana a las",
  "¬°Perfecto! un asesor te llamar√° el"
];

// Variable para realizar seguimiento del estado del sistema de correo
let emailSystemWorking = false;

// Configurar transporter solo si nodemailer est√° disponible
let transporter;
if (nodemailer) {
  transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: EMAIL_USER,
      pass: EMAIL_PASSWORD
    },
    debug: true,
    logger: true,
    // Aumentar los tiempos de espera
    connectionTimeout: 10000,
    greetingTimeout: 10000,
    // Desactivar verificaci√≥n TLS para mayor compatibilidad
    tls: {
      rejectUnauthorized: false
    }
  });
  
  // Verificar conexi√≥n al iniciar
  transporter.verify()
    .then(() => {
      console.log('‚úÖ Servidor SMTP verificado correctamente');
      emailSystemWorking = true;
      // Enviar correo de prueba para verificar que todo funciona
      sendTestEmail();
    })
    .catch(error => {
      console.error('‚ùå Error al verificar SMTP:', error);
      console.error('‚ùå Detalles:', { code: error.code, command: error.command });
      console.log('‚ö†Ô∏è Se ignorar√°n las solicitudes de env√≠o de correo');
    });
}

// Funci√≥n para enviar correo de prueba al iniciar
function sendTestEmail() {
  if (!transporter || !emailSystemWorking) return;
  
  const testMailOptions = {
    from: `"WhatsApp Bot - Test" <${EMAIL_USER}>`,
    to: NOTIFICATION_EMAIL,
    subject: 'Prueba de sistema de notificaciones',
    html: `<p>Este es un mensaje de prueba enviado el ${new Date().toISOString()}</p>
           <p>Si recibes este correo, el sistema de notificaciones est√° funcionando correctamente.</p>`
  };
  
  console.log('üìß Enviando correo de prueba para verificar configuraci√≥n...');
  transporter.sendMail(testMailOptions)
    .then(info => {
      console.log(`‚úÖ Correo de prueba enviado correctamente: ${info.messageId}`);
    })
    .catch(error => {
      console.error('‚ùå Error al enviar correo de prueba:', error);
      emailSystemWorking = false;
    });
}

// Funci√≥n para enviar notificaci√≥n por correo con reintentos
async function sendEmailNotification(phoneNumber, message) {
  console.log(`üìß INICIANDO ENV√çO DE NOTIFICACI√ìN POR CORREO`);
  console.log(`üìß N√∫mero de tel√©fono: ${phoneNumber}`);
  console.log(`üìß Mensaje: "${message}"`);
  
  // Si el sistema de correo no est√° disponible, guardar en archivo local
  if (!transporter || !emailSystemWorking) {
    console.log('‚ö†Ô∏è Sistema de correo no disponible, guardando notificaci√≥n localmente');
    saveNotificationToFile(phoneNumber, message);
    return false;
  }
  
  try {
    // Determinar tipo de notificaci√≥n
    let notificationType = "general";
    let emailSubject = "üîî Notificaci√≥n de WhatsApp";
    
    if (message.toLowerCase().includes("cita")) {
      notificationType = "cita";
      emailSubject = "üìÖ Nueva Cita Agendada por WhatsApp";
    } else if (message.toLowerCase().includes("asesor")) {
      notificationType = "asesor";
      emailSubject = "üë§ Cliente Requiere Asistencia por WhatsApp";
    } else if (message.toLowerCase().includes("llamada")) {
      notificationType = "llamada";
      emailSubject = "üìû Solicitud de Llamada por WhatsApp";
    }
    
    // Contenido del correo
    const emailContent = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #2c3e50; border-bottom: 1px solid #eee; padding-bottom: 10px;">${emailSubject}</h2>
        
        <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
          <h3 style="margin-top: 0; color: #34495e;">Datos del Cliente</h3>
          <p><strong>Tel√©fono:</strong> ${phoneNumber}</p>
          <p><strong>Fecha:</strong> ${new Date().toLocaleString()}</p>
        </div>
        
        <div style="margin-bottom: 20px;">
          <h3 style="color: #34495e;">Mensaje que Gener√≥ la Notificaci√≥n</h3>
          <div style="background-color: #e6f7ff; padding: 10px; border-radius: 5px;">
            ${message}
          </div>
        </div>
        
        <p style="color: #7f8c8d; font-size: 12px; margin-top: 30px; text-align: center;">
          Este es un mensaje autom√°tico. Por favor, no respondas directamente a este correo.
        </p>
      </div>
    `;
    
    // Opciones del correo
    const mailOptions = {
      from: `"WhatsApp Bot ü§ñ" <${EMAIL_USER}>`,
      to: NOTIFICATION_EMAIL,
      subject: `${emailSubject} - Cliente ${phoneNumber}`,
      html: emailContent
    };
    
    // Agregar BCC si existe
    if (BCC_EMAIL && BCC_EMAIL !== NOTIFICATION_EMAIL) {
      mailOptions.bcc = BCC_EMAIL;
      console.log(`üìß Agregando BCC: ${BCC_EMAIL}`);
    }
    
    // Sistema de reintentos para el env√≠o
    let attemptCount = 0;
    const maxAttempts = 3;
    let emailSent = false;
    
    while (attemptCount < maxAttempts && !emailSent) {
      attemptCount++;
      console.log(`üìß Intento ${attemptCount}/${maxAttempts} de env√≠o de correo a: ${NOTIFICATION_EMAIL}`);
      
      try {
        const info = await transporter.sendMail(mailOptions);
        console.log(`‚úÖ Correo enviado exitosamente: ${info.messageId}`);
        emailSent = true;
      } catch (error) {
        console.error(`‚ùå Error al enviar correo (intento ${attemptCount}): ${error.message}`);
        
        // Si hay m√°s intentos, esperar antes del siguiente
        if (attemptCount < maxAttempts) {
          const waitTime = Math.pow(2, attemptCount) * 1000; // 2s, 4s, 8s...
          console.log(`‚è±Ô∏è Esperando ${waitTime/1000}s antes del siguiente intento...`);
          await new Promise(resolve => setTimeout(resolve, waitTime));
        }
      }
    }
    
    // Si no se pudo enviar despu√©s de todos los intentos, guardar en archivo
    if (!emailSent) {
      console.log('‚ùå No se pudo enviar correo despu√©s de todos los intentos');
      saveNotificationToFile(phoneNumber, message);
      return false;
    }
    
    return true;
  } catch (error) {
    console.error(`‚ùå Error general al enviar correo: ${error.message}`);
    console.error(error.stack);
    saveNotificationToFile(phoneNumber, message);
    return false;
  }
}

// Funci√≥n para guardar notificaci√≥n en archivo local cuando falla el correo
function saveNotificationToFile(phoneNumber, message) {
  if (!fs) return;
  
  try {
    const notificationDir = './notification_backup';
    
    // Crear directorio si no existe
    if (!fs.existsSync(notificationDir)) {
      fs.mkdirSync(notificationDir, { recursive: true });
    }
    
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const filename = `${notificationDir}/notification_${phoneNumber}_${timestamp}.json`;
    
    const data = {
      phoneNumber,
      message,
      timestamp: new Date().toISOString(),
      type: message.toLowerCase().includes("cita") ? "cita" : 
            message.toLowerCase().includes("asesor") ? "asesor" : "general"
    };
    
    fs.writeFileSync(filename, JSON.stringify(data, null, 2));
    console.log(`‚úÖ Notificaci√≥n guardada en archivo: ${filename}`);
  } catch (error) {
    console.error(`‚ùå Error al guardar notificaci√≥n en archivo: ${error.message}`);
  }
}

// Funci√≥n para verificar si un mensaje requiere notificaci√≥n
function checkForNotificationPhrases(message) {
  console.log(`üîç Verificando notificaci√≥n para: "${message.substring(0, 50)}${message.length > 50 ? '...' : ''}"`);
  
  if (!message || typeof message !== 'string') {
    console.log('‚ùå Mensaje inv√°lido para verificaci√≥n de notificaci√≥n');
    return false;
  }
  
  // Normalizar el mensaje
  const normalizedMessage = message.toLowerCase().trim()
    .normalize("NFD").replace(/[\u0300-\u036f]/g, ""); // Eliminar acentos
  
  // Las √∫nicas frases exactas que deben activar el env√≠o del correo
  const criticalPhrases = [
    "¬°perfecto! tu cita ha sido confirmada para",
    "perfecto! tu cita ha sido confirmada para",
    "¬°perfecto! un asesor te llamar√°",
    "perfecto! un asesor te llamar√°",
    "¬°perfecto! un asesor te contactar√°",
    "perfecto! un asesor te contactar√°",
    "¬°perfecto! una persona te contactar√°",
    "perfecto! una persona te contactar√°"
  ];
  
  // Verificar si el mensaje contiene alguna de las frases espec√≠ficas
  for (const phrase of criticalPhrases) {
    if (normalizedMessage.includes(phrase)) {
      console.log(`‚úÖ COINCIDENCIA EXACTA: "${phrase}"`);
      return true;
    }
  }
  
  console.log(`‚ùå No se detectaron frases que requieran notificaci√≥n`);
  return false;
}

// Agregar middleware CORS para permitir solicitudes desde localhost:3000
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', 'http://localhost:3000');
  res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, DELETE');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  
  // Manejar solicitudes OPTIONS (preflight)
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  next();
});

app.use(express.json());

// Endpoint para verificar el estado del servidor
app.get('/api/status', (req, res) => {
  res.json({ status: 'online', timestamp: new Date().toISOString() });
});

app.get('/status', (req, res) => {
  res.json({ status: 'online', timestamp: new Date().toISOString() });
});

app.get('/health', (req, res) => {
  res.json({ status: 'healthy', timestamp: new Date().toISOString() });
});

// Endpoint para diagnosticar el sistema
app.get('/api/diagnose', (req, res) => {
  console.log('üîç Ejecutando diagn√≥stico del servidor WhatsApp');
  // Verificar las solicitudes recientes y conexiones activas
  const diagnosticResults = {
    serverStatus: 'online',
    processId: process.pid,
    memoryUsage: process.memoryUsage(),
    endpoints: [
      { path: '/api/send-message', method: 'POST', status: 'active' },
      { path: '/api/send-media', method: 'POST', status: 'active' },
      { path: '/api/status', method: 'GET', status: 'active' },
      { path: '/status', method: 'GET', status: 'active' },
      { path: '/health', method: 'GET', status: 'active' }
    ],
    timestamp: new Date().toISOString()
  };
  
  res.json(diagnosticResults);
});

// Endpoint para enviar mensaje simulado
app.post('/send-message', async (req, res) => {
  try {
    const { phone, message } = req.body;
    
    console.log(`üìù Recibida solicitud para enviar mensaje:`);
    console.log(`üì± Tel√©fono: ${phone}`);
    console.log(`üí¨ Mensaje: "${message}"`);
    
    if (!phone || !message) {
      console.log(`‚ùå Error: faltan datos requeridos`);
      return res.status(400).json({ error: 'Se requiere n√∫mero de tel√©fono y mensaje' });
    }
    
    console.log(`üîÑ Verificando si el mensaje requiere notificaci√≥n...`);
    
    // Verificar si el mensaje requiere notificaci√≥n
    const requiresNotification = checkForNotificationPhrases(message);
    console.log(`üîç Resultado de checkForNotificationPhrases: ${requiresNotification ? 'REQUIERE NOTIFICACI√ìN ‚úÖ' : 'NO REQUIERE NOTIFICACI√ìN ‚ùå'}`);
    
    if (requiresNotification) {
      console.log(`üîî DETECTADA FRASE QUE REQUIERE NOTIFICACI√ìN. Enviando correo...`);
      
      // Aqu√≠ ir√≠a la l√≥gica para enviar el correo
      console.log(`üìß INICIANDO ENV√çO DE NOTIFICACI√ìN POR CORREO`);
      console.log(`üìß N√∫mero de tel√©fono: ${phone}`);
      console.log(`üìß Mensaje: "${message}"`);
      
      // Configuraci√≥n para env√≠o de correos
      const transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
          user: 'bexorai@gmail.com',
          pass: 'gqwi aker jgrn kylf'  // contrase√±a de aplicaci√≥n
        },
        debug: true,
        logger: true
      });
      
      const emailContent = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #2c3e50; border-bottom: 1px solid #eee; padding-bottom: 10px;">üìÖ Nueva Cita Agendada por WhatsApp</h2>
        
        <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
          <h3 style="margin-top: 0; color: #34495e;">Datos del Cliente</h3>
          <p><strong>Tel√©fono:</strong> ${phone}</p>
          <p><strong>Fecha:</strong> ${new Date().toLocaleString()}</p>
        </div>
        
        <div style="margin-bottom: 20px;">
          <h3 style="color: #34495e;">Mensaje que Gener√≥ la Notificaci√≥n</h3>
          <div style="background-color: #e6f7ff; padding: 10px; border-radius: 5px;">
            ${message}
          </div>
        </div>
        
        <p style="color: #7f8c8d; font-size: 12px; margin-top: 30px; text-align: center;">
          Este es un mensaje autom√°tico. Por favor, no respondas directamente a este correo.
        </p>
      </div>
    `;
      
      const mailOptions = {
        from: '"WhatsApp Bot ü§ñ" <bexorai@gmail.com>',
        to: 'joaquinisaza@hotmail.com',
        subject: `üìÖ Nueva Cita Agendada por WhatsApp - Cliente ${phone}`,
        html: emailContent,
      };
      
      // Agregar BCC 
      mailOptions.bcc = 'copia@brexor.com';
      console.log(`üìß Agregando BCC: ${mailOptions.bcc}`);
      
      console.log(`üìß Intento 1/3 de env√≠o de correo a: ${mailOptions.to}`);
      
      try {
        const info = await transporter.sendMail(mailOptions);
        console.log(`‚úÖ Correo enviado exitosamente: ${info.messageId}`);
        console.log(`‚úÖ Notificaci√≥n enviada exitosamente`);
      } catch (emailError) {
        console.error(`‚ùå Error al enviar correo: ${emailError.message}`);
        // Intentamos una segunda vez
        console.log(`üìß Intento 2/3 de env√≠o de correo...`);
        try {
          const info2 = await transporter.sendMail(mailOptions);
          console.log(`‚úÖ Correo enviado exitosamente en el segundo intento: ${info2.messageId}`);
        } catch (emailError2) {
          console.error(`‚ùå Error en segundo intento: ${emailError2.message}`);
        }
      }
    }
    
    console.log(`üîÑ Enviando mensaje real a GupShup para ${phone}`);
    console.log(`üìù Mensaje: ${message}`);
        
    // Verificar si las credenciales est√°n configuradas
    if (!process.env.GUPSHUP_API_KEY || !process.env.GUPSHUP_NUMBER) {
      console.log(`‚ö†Ô∏è No hay credenciales de GupShup, simulando √©xito`);
      return res.json({ 
        success: true, 
        message: 'Mensaje procesado correctamente', 
        notificacion: requiresNotification ? 'Enviada' : 'No requerida' 
      });
    }
    
    try {
      const apiKey = process.env.GUPSHUP_API_KEY;
      console.log(`üîë Usando API KEY: ${apiKey.substring(0, 6)}...`);
      
      const sourceNumber = process.env.GUPSHUP_NUMBER;
      console.log(`üì± Usando n√∫mero fuente: ${sourceNumber}`);
      
      const userId = process.env.GUPSHUP_USERID;
      console.log(`üë§ Usando user ID: ${userId ? userId.substring(0, 9) + '...' : 'NO CONFIGURADO'}`);
      
      // Endpoint de GupShup
      const apiUrl = 'https://api.gupshup.io/sm/api/v1/msg';
      
      // Configuraci√≥n de la solicitud
      const formData = new URLSearchParams();
      formData.append('channel', 'whatsapp');
      formData.append('source', sourceNumber);
      formData.append('destination', phone);
      formData.append('message', message);
      formData.append('src.name', sourceNumber);
      
      const headers = {
        'Cache-Control': 'no-cache',
        'Content-Type': 'application/x-www-form-urlencoded',
        'apikey': apiKey
      };
      
      if (userId) {
        headers['userid'] = userId;
      }
      
      // Enviar solicitud a GupShup
      const response = await axios.post(apiUrl, formData, { headers });
      console.log(`‚úÖ Respuesta de GupShup: ${JSON.stringify(response.data)}`);
      
      return res.json({
        success: true,
        message: 'Mensaje enviado correctamente a GupShup',
        response: response.data,
        notificacion: requiresNotification ? 'Enviada' : 'No requerida'
      });
    } catch (error) {
      console.error(`‚ùå Error al enviar mensaje a GupShup: ${error.message}`);
      
      if (error.response) {
        console.error(`- Estado: ${error.response.status}`);
        console.error(`- Datos: ${JSON.stringify(error.response.data)}`);
      }
      
      return res.status(500).json({
        success: false,
        error: 'Error al enviar mensaje a GupShup',
        details: error.message
      });
    }
  } catch (error) {
    console.error(`‚ùå Error al enviar mensaje: ${error.message}`);
    return res.status(500).json({ error: 'Error interno al enviar mensaje' });
  }
});

// Endpoint para reiniciar conexiones a WhatsApp
app.post('/api/reset', (req, res) => {
  console.log('üîÑ Reiniciando conexiones a WhatsApp');
  
  // Simular reinicio de servicios
  setTimeout(() => {
    console.log('‚úÖ Conexiones reiniciadas correctamente');
  }, 500);
  
  return res.json({
    success: true,
    message: 'Reinicio de conexiones iniciado',
    timestamp: new Date().toISOString()
  });
});

// Endpoint para media
app.post('/api/send-media', (req, res) => {
  const { phoneNumber, mediaUrl, caption } = req.body;
  
  if (!phoneNumber || !mediaUrl) {
    return res.status(400).json({ success: false, error: 'Se requiere phoneNumber y mediaUrl' });
  }
  
  console.log(`üì± Simulando env√≠o de media a WhatsApp: ${phoneNumber}`);
  console.log(`üîó Media URL: ${mediaUrl}`);
  console.log(`üí¨ Caption: ${caption || 'N/A'}`);
  
  // Simular √©xito
  return res.json({ 
    success: true, 
    messageId: `sim-media-${Date.now()}`,
    timestamp: new Date().toISOString(),
    details: { phoneNumber, mediaUrl, caption }
  });
});

// Endpoint para enviar un mensaje manual
app.post('/api/send-manual-message', async (req, res) => {
  const { phoneNumber, message } = req.body;
  
  if (!phoneNumber || !message) {
    return res.status(400).json({ success: false, error: 'Se requiere phoneNumber y message' });
  }
  
  console.log(`üì± Enviando mensaje manual a WhatsApp: ${phoneNumber}`);
  console.log(`üí¨ Mensaje: ${message}`);
  
  try {
    // Intentar enviar el mensaje real a GupShup
    const result = await sendMessageToGupShup(phoneNumber, message);
    return res.json(result);
  } catch (error) {
    console.error(`‚ùå Error en env√≠o manual: ${error.message}`);
    return res.status(500).json({ 
      success: false, 
      error: error.message,
      timestamp: new Date().toISOString() 
    });
  }
});

// Agregar endpoint para prueba de notificaciones
app.post('/api/test-notification', async (req, res) => {
  try {
    const { message, phoneNumber } = req.body;
    
    if (!message || !phoneNumber) {
      return res.status(400).json({
        success: false,
        error: 'Se requieren message y phoneNumber'
      });
    }
    
    console.log(`üß™ PRUEBA DE NOTIFICACI√ìN SOLICITADA`);
    console.log(`üß™ Mensaje: "${message}"`);
    console.log(`üß™ Tel√©fono: ${phoneNumber}`);
    
    // Verificar si el mensaje requiere notificaci√≥n
    const requiresNotification = checkForNotificationPhrases(message);
    console.log(`üß™ ¬øRequiere notificaci√≥n?: ${requiresNotification ? 'S√ç ‚úÖ' : 'NO ‚ùå'}`);
    
    if (requiresNotification) {
      // Enviar notificaci√≥n
      const notificationSent = await sendEmailNotification(phoneNumber, message);
      
      if (notificationSent) {
        console.log(`‚úÖ Notificaci√≥n enviada exitosamente`);
        return res.status(200).json({
          success: true,
          message: 'Notificaci√≥n enviada correctamente',
          notificationSent: true
        });
      } else {
        console.log(`‚ùå Error al enviar la notificaci√≥n`);
        return res.status(500).json({
          success: false,
          error: 'Error al enviar la notificaci√≥n',
          notificationSent: false
        });
      }
    } else {
      console.log(`‚ÑπÔ∏è El mensaje no requiere notificaci√≥n`);
      return res.status(200).json({
        success: true,
        message: 'El mensaje no requiere notificaci√≥n',
        requiresNotification: false
      });
    }
  } catch (error) {
    console.error(`‚ùå Error al procesar solicitud de prueba:`, error);
    return res.status(500).json({
      success: false,
      error: 'Error interno al procesar la solicitud'
    });
  }
});

// Agregar endpoint para forzar notificaci√≥n aunque el mensaje no lo requiera
app.post('/api/force-notification', async (req, res) => {
  try {
    const { message, phoneNumber } = req.body;
    
    if (!message || !phoneNumber) {
      return res.status(400).json({
        success: false,
        error: 'Se requieren message y phoneNumber'
      });
    }
    
    console.log(`üß™ FORZANDO NOTIFICACI√ìN`);
    console.log(`üß™ Mensaje: "${message}"`);
    console.log(`üß™ Tel√©fono: ${phoneNumber}`);
    
    // Enviar notificaci√≥n sin verificaci√≥n
    const notificationSent = await sendEmailNotification(phoneNumber, message);
    
    if (notificationSent) {
      console.log(`‚úÖ Notificaci√≥n forzada enviada exitosamente`);
      return res.status(200).json({
        success: true,
        message: 'Notificaci√≥n forzada enviada correctamente',
        notificationSent: true
      });
    } else {
      console.log(`‚ùå Error al enviar la notificaci√≥n forzada`);
      return res.status(500).json({
        success: false,
        error: 'Error al enviar la notificaci√≥n forzada',
        notificationSent: false
      });
    }
  } catch (error) {
    console.error(`‚ùå Error al procesar solicitud de notificaci√≥n forzada:`, error);
    return res.status(500).json({
      success: false,
      error: 'Error interno al procesar la solicitud'
    });
  }
});

// Agregar endpoint para verificar el estado del servidor SMTP
app.get('/api/email-status', (req, res) => {
  console.log(`üîç Verificando estado del sistema de correo electr√≥nico`);
  
  // Verificar si el transporter est√° configurado
  if (!transporter) {
    console.log(`‚ùå Transporter no configurado`);
    return res.status(200).json({
      success: true,
      emailSystemWorking: false,
      message: 'Sistema de correo no configurado'
    });
  }
  
  // Verificar conexi√≥n
  transporter.verify()
    .then(() => {
      console.log(`‚úÖ Servidor SMTP verificado correctamente`);
      
      // Enviar un correo de prueba peque√±o para confirmar
      const testMailOptions = {
        from: `"WhatsApp Bot - Test" <${EMAIL_USER}>`,
        to: EMAIL_USER,
        subject: 'Verificaci√≥n de estado de correo',
        text: `Esta es una prueba de verificaci√≥n solicitada desde el endpoint /api/email-status a las ${new Date().toISOString()}`
      };
      
      return transporter.sendMail(testMailOptions);
    })
    .then((info) => {
      console.log(`‚úÖ Correo de prueba enviado: ${info?.messageId}`);
      emailSystemWorking = true;
      
      return res.status(200).json({
        success: true,
        emailSystemWorking: true,
        message: 'Sistema de correo funcionando correctamente',
        testEmailId: info?.messageId
      });
    })
    .catch((error) => {
      console.error(`‚ùå Error en sistema de correo:`, error);
      emailSystemWorking = false;
      
      return res.status(200).json({
        success: true,
        emailSystemWorking: false,
        message: `Error en sistema de correo: ${error.message}`,
        errorCode: error.code,
        errorCommand: error.command
      });
    });
});

// Iniciar servidor
app.listen(PORT, () => {
  console.log(`‚úÖ Servidor WhatsApp simulado iniciado en http://localhost:${PORT}`);
  console.log(`üìù Configurado para enviar mensajes reales a GupShup`);
  
  // Verificar la configuraci√≥n de correo
  console.log(`üìß Configuraci√≥n de correo:`);
  console.log(`- Remitente: ${EMAIL_USER}`);
  console.log(`- Contrase√±a: ${EMAIL_PASSWORD ? '‚úÖ Configurada' : '‚ùå No configurada'}`);
  console.log(`- Destinatario principal: ${NOTIFICATION_EMAIL}`);
  console.log(`- BCC: ${BCC_EMAIL || 'No configurado'}`);
  
  // Verificar conexi√≥n con el servidor SMTP
  transporter.verify()
    .then(() => console.log('‚úÖ Conexi√≥n con servidor de correo verificada'))
    .catch(err => console.error('‚ùå Error al verificar servidor de correo:', err));
}); 