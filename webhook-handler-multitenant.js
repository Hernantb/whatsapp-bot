/**
 * Webhook handler con soporte multi-tenant
 * 
 * Este m√≥dulo contiene el manejador de webhook que usa la configuraci√≥n din√°mica
 * para procesar mensajes de WhatsApp de diferentes negocios.
 */

// Importar el m√≥dulo de configuraci√≥n de negocios
const { getBusinessConfigByNumber } = require('./business-config-loader');

/**
 * Manejador de webhook para mensajes de WhatsApp con soporte multi-tenant
 * @param {Object} app Aplicaci√≥n Express
 * @param {Function} extractMessageData Funci√≥n para extraer datos del mensaje
 * @param {Function} processMessageWithOpenAI Funci√≥n para procesar mensajes con OpenAI
 * @param {Function} sendWhatsAppResponse Funci√≥n para enviar respuestas de WhatsApp
 * @param {Function} registerBotResponse Funci√≥n para registrar respuestas del bot
 * @param {Object} supabase Cliente Supabase
 */
function setupMultitenantWebhook(
  app,
  extractMessageData,
  processMessageWithOpenAI,
  sendWhatsAppResponse,
  registerBotResponse,
  supabase
) {
  app.post('/webhook', async (req, res) => {
    try {
      const body = req.body;
      console.log(`üì© Mensaje recibido en webhook: ${JSON.stringify(body).substring(0, 500)}...`);
      
      // Extraer datos del mensaje
      const messageData = extractMessageData(body);
      
      // Si es una actualizaci√≥n de estado, solo registrarla
      if (messageData.isStatusUpdate) {
        console.log(`üìä Notificaci√≥n de estado recibida, no requiere respuesta`);
        return res.sendStatus(200);
      }
      
      const { sender, recipient, message, messageId, isImage, isAudio } = messageData;
      
      if (!sender) {
        console.log(`‚ö†Ô∏è Mensaje sin remitente, ignorando: ${JSON.stringify(messageData)}`);
        return res.sendStatus(200);
      }
      
      // Modificar esta condici√≥n para permitir mensajes de audio/imagen sin contenido de texto
      if (!message && !isImage && !isAudio) {
        console.log(`‚ö†Ô∏è Mensaje sin contenido v√°lido, ignorando: ${JSON.stringify(messageData)}`);
        return res.sendStatus(200);
      }
      
      // NUEVO: Buscar configuraci√≥n del negocio seg√∫n el n√∫mero RECEPTOR
      const businessConfig = getBusinessConfigByNumber(recipient);
      
      if (!businessConfig) {
        console.log(`‚ö†Ô∏è No se encontr√≥ configuraci√≥n para el n√∫mero receptor: ${recipient}`);
        return res.sendStatus(200); // Responder OK para evitar reintentos
      }
      
      // Configurar variables din√°micas para este negocio
      const BUSINESS_ID = businessConfig.id;
      const GUPSHUP_API_KEY = businessConfig.gupshup_api_key;
      const GUPSHUP_NUMBER = businessConfig.gupshup_number;
      const ASSISTANT_ID = businessConfig.openai_assistant_id;
      
      console.log(`üè¢ Procesando mensaje para negocio: ${businessConfig.business_name}`);
      console.log(`üë§ Mensaje recibido de ${sender}: ${message || (isImage ? "[IMAGEN]" : isAudio ? "[AUDIO]" : "[DESCONOCIDO]")}`);
      
      // Verificar si este mensaje ya fue procesado recientemente
      // Generar una clave √∫nica para este mensaje que tenga en cuenta su tipo
      const messageKey = `${messageId || sender}_${message || (isImage ? "IMAGEN" : isAudio ? "AUDIO" : "DESCONOCIDO")}`;
      if (global.recentlyProcessedMessages && global.recentlyProcessedMessages.has(messageKey)) {
        console.log(`‚ö†Ô∏è Mensaje duplicado detectado, ignorando: ${messageKey}`);
        return res.sendStatus(200);
      }
      
      // Marcar este mensaje como procesado
      if (global.recentlyProcessedMessages) {
        global.recentlyProcessedMessages.add(messageKey);
        setTimeout(() => global.recentlyProcessedMessages.delete(messageKey), 60000); // Eliminar despu√©s de 1 minuto
      }
      
      // Guardar mensaje en Supabase
      console.log(`üíæ Guardando mensaje entrante para ${sender}`);
      let conversationId = null;
      
      try {
        // Guardar mensaje del usuario en la base de datos
        console.log(`üíæ Guardando mensaje de tipo 'user' para: ${sender}`);
        
        // NUEVO: Pasar businessId espec√≠fico
        const userMessageResult = await registerBotResponse(
          sender, 
          message || (isImage ? "[IMAGEN RECIBIDA]" : "[AUDIO RECIBIDA]"), 
          BUSINESS_ID, 
          'user'
        );
  
        if (userMessageResult && userMessageResult.success) {
          console.log('‚úÖ Mensaje guardado en Supabase correctamente');
          conversationId = userMessageResult.conversationId;
        } else {
          console.error(`‚ùå Error al guardar mensaje en Supabase: ${userMessageResult?.error || 'Error desconocido'}`);
        }
      } catch (supabaseError) {
        console.error(`‚ùå Error al guardar mensaje en Supabase: ${supabaseError.message}`);
      }
      
      // üîí VERIFICACI√ìN CR√çTICA: Verificar estado del bot para este remitente
      console.log(`üîí FORZANDO CONSULTA A BASE DE DATOS para verificar estado actual del bot`);
      let botActive = true;
      
      try {
        // Primero intentar con el ID de conversaci√≥n si lo tenemos
        if (conversationId) {
          const { data: convData, error: convError } = await supabase
            .from('conversations')
            .select('is_bot_active')
            .eq('id', conversationId)
            .eq('business_id', BUSINESS_ID) // NUEVO: Filtrar por business_id
            .single();
          
          if (convError) {
            console.error(`‚ùå Error consultando estado del bot: ${convError.message}`);
          } else if (convData) {
            botActive = convData.is_bot_active === true; // Comparaci√≥n estricta
            console.log(`‚ÑπÔ∏è ESTADO DIRECTO DB: Bot ${botActive ? 'ACTIVO ‚úÖ' : 'INACTIVO ‚ùå'} para la conversaci√≥n ${conversationId} (n√∫mero ${sender})`);
          }
        } else {
          // Si no tenemos ID, buscar por n√∫mero
          const { data: convByNumber, error: numberError } = await supabase
            .from('conversations')
            .select('id, is_bot_active')
            .eq('user_id', sender)
            .eq('business_id', BUSINESS_ID) // NUEVO: Filtrar por business_id
            .single();
          
          if (numberError) {
            console.error(`‚ùå Error consultando por n√∫mero: ${numberError.message}`);
          } else if (convByNumber) {
            botActive = convByNumber.is_bot_active === true;
            console.log(`‚ÑπÔ∏è ESTADO POR N√öMERO: Bot ${botActive ? 'ACTIVO ‚úÖ' : 'INACTIVO ‚ùå'} para ${sender}`);
            
            // Actualizar tambi√©n el ID de conversaci√≥n
            conversationId = convByNumber.id;
          }
        }
      } catch (dbError) {
        console.error(`‚ùå Error cr√≠tico consultando estado del bot: ${dbError.message}`);
      }
      
      // Verificaci√≥n final antes de procesar
      console.log(`üîê VERIFICACI√ìN FINAL antes de procesar: Bot para ${sender} est√° ${botActive ? 'ACTIVO ‚úÖ' : 'INACTIVO ‚ùå'}`);
    
      // Si es una imagen, enviar una respuesta est√°ndar inmediatamente
      if (isImage && botActive) {
        console.log('üñºÔ∏è Respondiendo a mensaje de imagen con respuesta est√°ndar');
        
        const imageResponse = "Lo siento, actualmente no puedo procesar im√°genes. Por favor, env√≠a tu consulta como mensaje de texto o, si necesitas asistencia con esta imagen, puedo transferirte con un asesor.";
        
        try {
          // NUEVO: Pasar businessConfig completo
          await sendWhatsAppResponse(sender, imageResponse, businessConfig);
          
          // Registrar la respuesta en la base de datos
          if (conversationId) {
            await registerBotResponse(conversationId, imageResponse, BUSINESS_ID);
            console.log('‚úÖ Respuesta a imagen registrada en la base de datos');
          }
        } catch (responseError) {
          console.error(`‚ùå Error enviando respuesta a imagen: ${responseError.message}`);
        }
        
        // Terminar aqu√≠, no pasamos la imagen al procesamiento normal
        return res.sendStatus(200);
      }
      
      // Si es un audio, enviar una respuesta est√°ndar inmediatamente
      if (isAudio && botActive) {
        console.log('üîä Respondiendo a mensaje de audio con respuesta est√°ndar');
        
        // Respuesta personalizada para mensajes de audio
        const audioResponse = "Lo siento, actualmente no puedo procesar mensajes de audio. Por favor, env√≠a tu consulta como mensaje de texto o, si necesitas ayuda con lo que mencionaste en el audio, puedo transferirte con un asesor.";
        
        try {
          // NUEVO: Pasar businessConfig completo
          await sendWhatsAppResponse(sender, audioResponse, businessConfig);
          
          // Registrar la respuesta en la base de datos
          if (conversationId) {
            await registerBotResponse(conversationId, audioResponse, BUSINESS_ID);
            console.log('‚úÖ Respuesta a audio registrada en la base de datos');
          }
        } catch (responseError) {
          console.error(`‚ùå Error enviando respuesta a audio: ${responseError.message}`);
        }
        
        // Terminar aqu√≠, no pasamos el audio al procesamiento normal
        return res.sendStatus(200);
      }
    
      // Procesar mensaje con OpenAI SOLO si el bot est√° ACTIVO y no es una imagen ni un audio
      if (botActive && !isImage && !isAudio) {
        console.log(`üîç Intentando procesar mensaje de texto con OpenAI`);
        
        try {
          // NUEVO: Pasar businessConfig completo
          const openAIResponse = await processMessageWithOpenAI(
            sender, 
            message, 
            conversationId, 
            businessConfig
          );
          
          if (openAIResponse && openAIResponse.success) {
            console.log(`‚úÖ Respuesta de OpenAI enviada correctamente`);
          } else {
            console.error(`‚ùå Error procesando mensaje con OpenAI: ${openAIResponse?.error || 'Desconocido'}`);
            
            // Si falla OpenAI, intentar enviar mensaje de error gen√©rico
            try {
              const errorMessage = 'Lo siento, estoy teniendo problemas para procesar tu mensaje. Por favor, intenta m√°s tarde o contacta a un asesor.';
              
              // NUEVO: Pasar businessConfig completo
              await sendWhatsAppResponse(sender, errorMessage, businessConfig);
              
              // Registrar la respuesta de error en la base de datos
              if (conversationId) {
                await registerBotResponse(conversationId, errorMessage, BUSINESS_ID);
              }
            } catch (fallbackError) {
              console.error(`‚ùå Error enviando mensaje de error: ${fallbackError.message}`);
            }
          }
        } catch (openaiError) {
          console.error(`‚ùå Error procesando mensaje con OpenAI: ${openaiError.message}`);
        }
      } else if (!botActive) {
        console.log(`ü§ñ Bot inactivo para ${sender}, no se procesa el mensaje`);
      }
      
      return res.sendStatus(200);
    } catch (error) {
      console.error(`‚ùå Error procesando webhook: ${error.message}`);
      return res.sendStatus(200); // Siempre responder 200 para evitar reintentos
    }
  });
}

module.exports = setupMultitenantWebhook; 