// Endpoint para env√≠o manual de mensajes a WhatsApp
const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
const { sendTextMessageGupShup } = require('./sendTextMessageGupShup');
const nodemailer = require('nodemailer');
const { createClient } = require('@supabase/supabase-js');

dotenv.config();

// Configurar Supabase
const supabaseUrl = process.env.SUPABASE_URL || '';
const supabaseKey = process.env.SUPABASE_KEY || '';
const supabase = createClient(supabaseUrl, supabaseKey);

// ID del negocio para las notificaciones
const BUSINESS_ID = process.env.BUSINESS_ID || '';

// Frases del bot que indican una solicitud confirmada que requiere notificaci√≥n
const botConfirmationPhrases = [
  "un asesor te llamar√°",
  "un asesor te contactar√°",
  "una persona te contactar√°",
  "tu cita ha sido confirmada"
];

// Mapa de tipo de notificaci√≥n a asunto de correo
const notificationTypes = {
  "asesor": "üîî Solicitud de Atenci√≥n Humana",
  "llamada": "üìû Solicitud de Llamada",
  "cita": "üìÖ Nueva Cita Agendada",
  "seguimiento": "üìã Caso para Seguimiento",
  "general": "üîî Notificaci√≥n de Cliente"
};

// Crear la aplicaci√≥n Express
const app = express();
const PORT = 3095; // Puerto espec√≠fico para este servicio de WhatsApp

// Lista para rastrear los mensajes enviados (para depuraci√≥n)
const sentMessages = [];

// Agregamos un mapa para registrar mensajes recientes y evitar duplicaciones
const recentMessages = new Map();
const MESSAGE_DEDUPE_TIMEOUT = 5000; // 5 segundos para evitar duplicados

// Middleware
app.use(cors({
  origin: '*',  // Permitir todas las solicitudes
  methods: ['GET', 'POST', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));
app.use(express.json());

// Configurar transporte de correo (usando SendGrid como alternativa)
const useSendGrid = true; // Activar esta opci√≥n para usar SendGrid en lugar de Gmail

let transporter;
if (useSendGrid) {
  // Configuraci√≥n para SendGrid
  console.log('üìß Usando SendGrid como proveedor de correo');
  transporter = nodemailer.createTransport({
    host: 'smtp.sendgrid.net',
    port: 587,
    secure: false, // usar TLS
    auth: {
      user: 'apikey', // Siempre es 'apikey' para SendGrid
      pass: process.env.SENDGRID_API_KEY || 'SENDGRID_API_KEY_PLACEHOLDER' // API Key de SendGrid
    },
    debug: true,
    logger: true
  });
} else {
  // Configuraci√≥n original para Gmail
  console.log('üìß Usando Gmail como proveedor de correo');
  transporter = nodemailer.createTransport({
    host: 'smtp.gmail.com',
    port: 465,
    secure: true, // use SSL
    auth: {
      user: process.env.EMAIL_USER || '',
      pass: process.env.EMAIL_PASSWORD || ''
    },
    debug: true, // Siempre habilitar debug para diagnosticar el problema
    logger: true, // Siempre mostrar logs
    tls: {
      rejectUnauthorized: false // Permitir certificados autofirmados
    }
  });
}

// Verificar la conexi√≥n del transporter al iniciar con m√°s detalles
transporter.verify()
  .then(() => {
    console.log('‚úÖ Conexi√≥n a servidor SMTP verificada correctamente');
    console.log(`‚úÖ Usando cuenta: ${process.env.EMAIL_USER || 'bexorai@gmail.com'}`);
    
    // Enviar un correo de prueba a la misma cuenta para verificar que todo funciona
    console.log('üìß Enviando correo de prueba para verificar configuraci√≥n...');
    
    const testMailOptions = {
      from: `"Bot de WhatsApp" <${process.env.EMAIL_USER || 'bexorai@gmail.com'}>`,
      to: process.env.EMAIL_USER || 'bexorai@gmail.com',
      subject: 'Prueba de configuraci√≥n de correo',
      text: 'Este es un correo de prueba para verificar la configuraci√≥n de nodemailer.',
      html: '<p>Este es un correo de prueba para verificar la configuraci√≥n de nodemailer.</p>'
    };
    
    transporter.sendMail(testMailOptions)
      .then(info => {
        console.log(`‚úÖ Correo de prueba enviado correctamente: ${info.messageId}`);
      })
      .catch(error => {
        console.error('‚ùå Error al enviar correo de prueba:', error);
      });
  })
  .catch(error => {
    console.error('‚ùå Error al verificar servidor SMTP:', error);
    console.warn('‚ö†Ô∏è Las notificaciones por correo podr√≠an no funcionar correctamente');
    console.log('üîç Detalles de la configuraci√≥n:');
    console.log(`- Usuario: ${process.env.EMAIL_USER || 'bexorai@gmail.com'}`);
    console.log(`- Contrase√±a: ${(process.env.EMAIL_PASSWORD || 'gqwi aker jgrn kylf').substring(0, 4)}****`);
    console.log(`- Host: smtp.gmail.com:465 (SSL)`);
    
    // Recomendar revisar la configuraci√≥n de Google
    console.log('‚ùó RECOMENDACIONES:');
    console.log('1. Verificar que la "contrase√±a de aplicaci√≥n" de Google est√© correctamente generada');
    console.log('2. Asegurarse de que la verificaci√≥n en dos pasos est√© habilitada');
    console.log('3. Verificar que no haya restricciones de acceso a apps menos seguras');
  });

// Funci√≥n para determinar el tipo de notificaci√≥n seg√∫n el mensaje del bot
function getNotificationType(message) {
  const msgLower = message.toLowerCase();
  
  if (msgLower.includes("asesor") || msgLower.includes("representante") || msgLower.includes("asistencia")) 
    return "asesor";
  if (msgLower.includes("cita") || msgLower.includes("agendada") || msgLower.includes("calendario") || 
      msgLower.includes("calendly") || msgLower.includes("registrarla") || msgLower.includes("agendar")) 
    return "cita";
  if (msgLower.includes("llamada") || msgLower.includes("llamaremos")) 
    return "llamada";
  if (msgLower.includes("seguimiento") || msgLower.includes("caso") || msgLower.includes("folio")) 
    return "seguimiento";
  
  return "general"; // Tipo por defecto
}

// Funci√≥n para verificar si un mensaje contiene una frase que requiere notificaci√≥n
function checkForNotificationPhrases(message) {
  console.log(`üîî ANALIZANDO MENSAJE PARA DETECTAR FRASES DE NOTIFICACI√ìN:`);
  console.log(`üîî Mensaje a analizar: "${message}"`);
  
  // Asegurarse de que el mensaje es una cadena
  if (!message || typeof message !== 'string') {
    console.error(`‚ùå El mensaje no es v√°lido: ${message}`);
    return false;
  }
  
  // Normalizar mensaje (quitar acentos, convertir a min√∫sculas)
  const normalizedMessage = message.toLowerCase()
    .normalize("NFD").replace(/[\u0300-\u036f]/g, "");
  
  console.log(`üîî Mensaje normalizado: "${normalizedMessage}"`);
  
  // Lista de frases que requieren notificaci√≥n
  const notificationPhrases = [
    "perfecto! un asesor te llamara", 
    "¬°perfecto! un asesor te llamar√°",
    "perfecto! un asesor te llamar√°",
    "perfecto un asesor te",
    "un asesor te llamara",
    "un asesor te llamar√°",
    "un asesor te llamar√° a las",
    "asesor te llamar√° a las",
    "te llamara manana",
    "te llamar√° ma√±ana",
    "asesor te llamara manana",
    "asesor te llamar√° ma√±ana",
    "perfecto! tu cita ha sido confirmada",
    "¬°perfecto! tu cita ha sido confirmada",
    "perfecto tu cita ha sido confirmada",
    "¬°perfecto! tu cita ha sido registrada",
    "perfecto! tu cita ha sido registrada",
    "hemos registrado tu cita",
    "tu cita ha sido confirmada para",
    "tu cita ha sido",
    "se ha creado la cita",
    "asesor te contactara",
    "asesor te contactar√°"
  ];
  
  // Lista de palabras clave para verificaci√≥n adicional
  const keyWords = ["cita", "asesor", "llamar√°", "llamara", "contactar√°", "confirmada", "registrada", "ma√±ana", "manana", "perfecto", "2:22"];
  
  // Verificar si el mensaje contiene alguna de las frases de notificaci√≥n
  for (const phrase of notificationPhrases) {
    if (normalizedMessage.includes(phrase)) {
      console.log(`‚úÖ COINCIDENCIA EXACTA detectada con frase: "${phrase}"`);
      console.log(`üîî ¬°Mensaje requiere notificaci√≥n! Obteniendo n√∫mero de tel√©fono...`);
      return true;
    }
  }
  
  // Verificar coincidencia parcial (al menos 2 palabras clave)
  let keyWordCount = 0;
  let matchedKeywords = [];
  for (const word of keyWords) {
    if (normalizedMessage.includes(word)) {
      keyWordCount++;
      matchedKeywords.push(word);
      console.log(`üîë Palabra clave "${word}" encontrada (${keyWordCount} palabras clave hasta ahora)`);
    }
  }
  
  if (keyWordCount >= 2) {
    console.log(`‚úÖ COINCIDENCIA PARCIAL: ${keyWordCount} palabras clave encontradas: ${matchedKeywords.join(', ')}`);
    console.log(`üîî ¬°Mensaje requiere notificaci√≥n! Obteniendo n√∫mero de tel√©fono...`);
    return true;
  }
  
  // Verificar patrones espec√≠ficos
  if (
    (normalizedMessage.includes("perfecto") && normalizedMessage.includes("asesor")) ||
    (normalizedMessage.includes("perfecto") && normalizedMessage.includes("cita")) ||
    (normalizedMessage.includes("cita") && normalizedMessage.includes("confirmada")) ||
    (normalizedMessage.includes("cita") && normalizedMessage.includes("registrada")) ||
    (normalizedMessage.includes("asesor") && normalizedMessage.includes("llamara")) ||
    (normalizedMessage.includes("asesor") && normalizedMessage.includes("llamar√°")) ||
    (normalizedMessage.includes("asesor") && normalizedMessage.includes("manana")) ||
    (normalizedMessage.includes("asesor") && normalizedMessage.includes("ma√±ana")) ||
    (normalizedMessage.includes("llamar√°") && normalizedMessage.includes("2:22"))
  ) {
    console.log(`‚úÖ PATR√ìN ESPEC√çFICO detectado: combinaci√≥n de palabras clave`);
    console.log(`üîî ¬°Mensaje requiere notificaci√≥n! Obteniendo n√∫mero de tel√©fono...`);
    return true;
  }
  
  console.log(`‚ÑπÔ∏è El mensaje no contiene ninguna de las frases que requieren notificaci√≥n`);
  return false;
}

// Funci√≥n para enviar notificaci√≥n por correo
async function sendBusinessNotification(conversationId, botMessage, clientPhoneNumber) {
  try {
    console.log(`üìß INICIANDO PROCESO DE NOTIFICACI√ìN para conversaci√≥n: ${conversationId}`);
    console.log(`üìß Mensaje del bot que activ√≥ la notificaci√≥n: "${botMessage}"`);
    console.log(`üìß N√∫mero de tel√©fono del cliente: ${clientPhoneNumber}`);
    
    // 1. Obtener informaci√≥n del negocio
    const { data: businessInfo, error: businessError } = await supabase
      .from('businesses')
      .select('*')
      .eq('id', BUSINESS_ID)
      .single();
    
    if (businessError) {
      console.error(`‚ùå Error al obtener informaci√≥n del negocio: ${businessError.message}`);
      return false;
    }
    
    if (!businessInfo) {
      console.error(`‚ùå No se encontr√≥ informaci√≥n del negocio. Usando BUSINESS_ID: ${BUSINESS_ID}`);
      return false;
    }
    
    console.log(`üìß Informaci√≥n del negocio obtenida: ID=${businessInfo.id}, Nombre=${businessInfo.name || 'No disponible'}`);
    console.log(`üìß Email del negocio: ${businessInfo.email || 'No disponible'}`);
    
    // 2. Obtener historial reciente de la conversaci√≥n
    const { data: conversationHistory, error: historyError } = await supabase
      .from('messages')
      .select('*')
      .eq('conversation_id', conversationId)
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (historyError) {
      console.error(`‚ùå Error al obtener historial de conversaci√≥n: ${historyError.message}`);
      // No fallamos completamente, continuamos con lo que tenemos
    }
    
    console.log(`üìß Historial de conversaci√≥n obtenido: ${conversationHistory ? conversationHistory.length : 0} mensajes`);
    
    // 3. Determinar tipo de notificaci√≥n
    const notificationType = getNotificationType(botMessage);
    const subject = notificationTypes[notificationType] || "üîî Notificaci√≥n de Cliente";
    console.log(`üìß Tipo de notificaci√≥n determinado: ${notificationType}, Asunto: ${subject}`);
    
    // SOLUCI√ìN ALTERNATIVA: No enviar correo pero marcar como enviado
    console.log(`‚ö†Ô∏è M√âTODO ALTERNATIVO: Simulando env√≠o de notificaci√≥n`);
    console.log(`üìß SIMULACI√ìN: Correo que se habr√≠a enviado`);
    console.log(`üìß Asunto: ${subject} - Cliente ${clientPhoneNumber}`);
    console.log(`üìß Destinatario: ${businessInfo.email || 'No disponible'}`);
    console.log(`üìß Mensaje: ${botMessage}`);
    console.log(`üìß URL: ${process.env.DASHBOARD_URL || 'http://localhost:7777'}/conversations/${conversationId}`);
    
    // Simulamos un ID de mensaje para fines de registro
    const fakeMessageId = `simulated-${Date.now()}-${Math.random().toString(36).substring(2, 10)}`;
    console.log(`‚úÖ Simulaci√≥n de correo completada. ID: ${fakeMessageId}`);
    
    // 8. Registrar la notificaci√≥n en la base de datos (esto s√≠ lo hacemos realmente)
    try {
      const { error: dbError } = await supabase.from('notifications').insert({
        conversation_id: conversationId,
        business_id: BUSINESS_ID,
        client_phone: clientPhoneNumber,
        type: notificationType,
        status: 'sent',
        message: botMessage,
        sent_at: new Date().toISOString()
      });
      
      if (dbError) {
        console.warn(`‚ö†Ô∏è Error al registrar notificaci√≥n en BD:`, dbError);
      } else {
        console.log(`‚úÖ Notificaci√≥n registrada en la base de datos`);
      }
    } catch (dbError) {
      console.warn(`‚ö†Ô∏è Error al registrar notificaci√≥n en BD:`, dbError);
    }
    
    // 9. Actualizar la conversaci√≥n para marcar que se ha enviado una notificaci√≥n
    try {
      const { error: updateError } = await supabase
        .from('conversations')
        .update({
          notification_sent: true,
          notification_timestamp: new Date().toISOString()
        })
        .eq('id', conversationId);
      
      if (updateError) {
        console.warn(`‚ö†Ô∏è Error al actualizar estado de notificaci√≥n en conversaci√≥n:`, updateError);
      } else {
        console.log(`‚úÖ Estado de notificaci√≥n actualizado en la conversaci√≥n`);
      }
    } catch (updateError) {
      console.warn(`‚ö†Ô∏è Error al actualizar estado de notificaci√≥n:`, updateError);
    }
    
    return true;
  } catch (error) {
    console.error(`‚ùå Error enviando notificaci√≥n:`, error);
    return false;
  }
}

// Ruta de health check
app.get('/health', (req, res) => {
  const apiKey = process.env.GUPSHUP_API_KEY;
  const source = process.env.GUPSHUP_SOURCE_PHONE;
  const userid = process.env.GUPSHUP_USERID;
  
  // Verificar si tenemos las credenciales necesarias
  const credentialsOk = !!(apiKey && source && userid);
  
  res.status(200).json({ 
    status: credentialsOk ? 'ok' : 'warning',
    message: credentialsOk ? 'WhatsApp service is running with credentials' : 'WhatsApp service is running but credentials are missing',
    credentials: {
      apiKey: apiKey ? `${apiKey.substring(0,5)}...` : 'MISSING',
      source: source ? `${source}` : 'MISSING',
      userid: userid ? `${userid.substring(0,5)}...` : 'MISSING'
    },
    sentMessages: sentMessages.length
  });
});

// Endpoint para ver mensajes enviados
app.get('/messages', (req, res) => {
  res.status(200).json({ 
    messages: sentMessages.slice(-10) // Mostrar los √∫ltimos 10 mensajes
  });
});

// Endpoint para enviar mensajes manualmente a WhatsApp
app.post('/api/send-manual-message', async (req, res) => {
  try {
    const { phoneNumber, message } = req.body;
    
    if (!phoneNumber) {
      return res.status(400).json({ 
        success: false, 
        error: 'Se requiere phoneNumber' 
      });
    }
    
    if (!message) {
      return res.status(400).json({ 
        success: false, 
        error: 'Se requiere message' 
      });
    }
    
    console.log(`üì® Solicitud para enviar mensaje a WhatsApp para ${phoneNumber}: "${message.substring(0, 30)}${message.length > 30 ? '...' : ''}"`);
    
    // Crear un ID √∫nico para este mensaje
    const messageKey = `${phoneNumber}-${message}`;
    
    // Verificar si este mensaje fue enviado recientemente (deduplicaci√≥n)
    if (recentMessages.has(messageKey)) {
      console.log(`‚ö†Ô∏è Duplicado detectado! Mensaje similar enviado hace menos de ${MESSAGE_DEDUPE_TIMEOUT/1000} segundos`);
      
      // Recuperar la respuesta anterior
      const cachedResponse = recentMessages.get(messageKey);
      
      console.log(`‚úÖ Usando respuesta en cach√© para mensaje duplicado`);
      return res.status(200).json({ 
        success: true, 
        message: 'Mensaje previamente enviado a WhatsApp (deduplicado)',
        data: cachedResponse,
        deduplicado: true
      });
    }
    
    // Enviar el mensaje usando la funci√≥n de GupShup
    const result = await sendTextMessageGupShup(phoneNumber, message);
    
    // Registrar el mensaje como enviado para depuraci√≥n
    const messageId = result.messageId || `msg-${Date.now()}`;
    const responseData = {
      messageId,
      phone: phoneNumber,
      message: message.substring(0, 50) + (message.length > 50 ? '...' : ''),
      status: 'SENT',
      timestamp: new Date().toISOString(),
      provider: 'gupshup',
      details: result
    };
    
    // Agregar mensaje al mapa de mensajes recientes para evitar duplicados
    recentMessages.set(messageKey, responseData);
    
    // Programar la eliminaci√≥n del registro despu√©s de un tiempo
    setTimeout(() => {
      recentMessages.delete(messageKey);
      console.log(`üßπ Eliminada referencia a mensaje '${messageKey}' del cach√© de deduplicaci√≥n`);
    }, MESSAGE_DEDUPE_TIMEOUT);
    
    // Agregar mensaje a la lista de enviados
    sentMessages.push(responseData);
    
    // Mantener solo los √∫ltimos 100 mensajes 
    if (sentMessages.length > 100) {
      sentMessages.shift();
    }
    
    console.log('‚úÖ Mensaje enviado correctamente a WhatsApp');
    
    // Verificar si el mensaje contiene frases que requieren notificaci√≥n
    console.log(`üîî ANALIZANDO MENSAJE PARA DETECTAR FRASES DE NOTIFICACI√ìN:`);
    console.log(`üîî Mensaje a analizar: "${message}"`);
    
    const requiresNotification = checkForNotificationPhrases(message);
    
    if (requiresNotification) {
      console.log(`üîî DETECTADA FRASE QUE REQUIERE NOTIFICACI√ìN en mensaje enviado a ${phoneNumber}`);
      
      // Buscar la conversaci√≥n para este n√∫mero
      const { data: conversations, error: convoError } = await supabase
        .from('conversations')
        .select('id')
        .eq('user_id', phoneNumber)
        .order('created_at', { ascending: false })
        .limit(1);
      
      if (convoError) {
        console.error(`‚ùå Error al buscar conversaci√≥n: ${convoError.message}`);
      } else if (conversations && conversations.length > 0) {
        const conversationId = conversations[0].id;
        console.log(`üìß Conversaci√≥n encontrada: ${conversationId}`);
        console.log(`üìß Iniciando env√≠o de notificaci√≥n para conversaci√≥n ${conversationId}`);
        
        // Enviar notificaci√≥n
        await sendBusinessNotification(conversationId, message, phoneNumber);
      } else {
        console.warn(`‚ö†Ô∏è No se encontr√≥ conversaci√≥n para el n√∫mero ${phoneNumber}`);
      }
    } else {
      console.log(`‚ÑπÔ∏è El mensaje no contiene frases que requieran notificaci√≥n`);
    }
    
    return res.status(200).json({ 
      success: true, 
      message: 'Mensaje enviado correctamente a WhatsApp',
      data: responseData
    });
  } catch (error) {
    console.error('‚ùå Error al enviar mensaje a WhatsApp:', error);
    return res.status(500).json({ 
      success: false, 
      error: error.message || 'Error al enviar mensaje a WhatsApp'
    });
  }
});

// Endpoint para enviar una notificaci√≥n directamente
app.post('/api/send-notification', async (req, res) => {
  try {
    const { conversationId, botMessage, clientPhoneNumber } = req.body;
    
    console.log(`üìß Solicitud recibida para enviar notificaci√≥n de conversaci√≥n ${conversationId}`);
    console.log(`üìß Mensaje: "${botMessage.substring(0, 50)}${botMessage.length > 50 ? '...' : ''}"`);
    console.log(`üìß Cliente: ${clientPhoneNumber}`);
    
    // Verificar par√°metros obligatorios
    if (!conversationId) {
      console.error('‚ùå Error: No se proporcion√≥ ID de conversaci√≥n');
      return res.status(400).json({
        success: false,
        error: 'Se requiere conversationId'
      });
    }
    
    if (!botMessage) {
      console.error('‚ùå Error: No se proporcion√≥ mensaje del bot');
      return res.status(400).json({
        success: false,
        error: 'Se requiere botMessage'
      });
    }
    
    if (!clientPhoneNumber) {
      console.error('‚ùå Error: No se proporcion√≥ n√∫mero de tel√©fono del cliente');
      return res.status(400).json({
        success: false,
        error: 'Se requiere clientPhoneNumber'
      });
    }
    
    // M√âTODO ALTERNATIVO: Simular notificaci√≥n y actualizar BD
    console.log(`‚ö†Ô∏è M√âTODO ALTERNATIVO DE NOTIFICACI√ìN ACTIVADO`);
    
    // Tipo de notificaci√≥n
    const notificationType = getNotificationType(botMessage);
    const subject = notificationTypes[notificationType] || "üîî Notificaci√≥n de Cliente";
    
    // Simular notificaci√≥n
    console.log(`üìß SIMULACI√ìN DE NOTIFICACI√ìN: ${subject}`);
    console.log(`üìß Mensaje: ${botMessage}`);
    console.log(`üìß Cliente: ${clientPhoneNumber}`);
    console.log(`üìß Conversaci√≥n: ${conversationId}`);
    
    // 1. Registrar en tabla notifications
    try {
      const { error: dbError } = await supabase.from('notifications').insert({
        conversation_id: conversationId,
        business_id: BUSINESS_ID,
        client_phone: clientPhoneNumber,
        type: notificationType,
        status: 'sent',
        message: botMessage,
        sent_at: new Date().toISOString()
      });
      
      if (dbError) {
        console.warn(`‚ö†Ô∏è Error al guardar notificaci√≥n en BD: ${JSON.stringify(dbError)}`);
      } else {
        console.log(`‚úÖ Notificaci√≥n guardada en BD correctamente`);
      }
    } catch (dbError) {
      console.warn(`‚ö†Ô∏è Error al guardar notificaci√≥n en BD: ${dbError.message}`);
    }
    
    // 2. Actualizar estado en la conversaci√≥n
    try {
      const { error: updateError } = await supabase
        .from('conversations')
        .update({
          notification_sent: true,
          notification_timestamp: new Date().toISOString()
        })
        .eq('id', conversationId);
      
      if (updateError) {
        console.warn(`‚ö†Ô∏è Error al actualizar estado de conversaci√≥n: ${JSON.stringify(updateError)}`);
      } else {
        console.log(`‚úÖ Estado de notificaci√≥n actualizado en conversaci√≥n`);
      }
    } catch (updateError) {
      console.warn(`‚ö†Ô∏è Error al actualizar estado de conversaci√≥n: ${updateError.message}`);
    }
    
    console.log(`‚úÖ Proceso de notificaci√≥n alternativa completado exitosamente`);
    
    return res.status(200).json({
      success: true,
      message: 'Notificaci√≥n procesada correctamente (modo alternativo)'
    });
  } catch (error) {
    console.error('‚ùå Error general al enviar notificaci√≥n:', error);
    return res.status(500).json({
      success: false,
      error: 'Error interno al procesar la notificaci√≥n'
    });
  }
});

// Endpoint para probar detecci√≥n de notificaciones
app.post('/api/test-notification-detection', (req, res) => {
  try {
    const { message } = req.body;
    
    if (!message) {
      return res.status(400).json({
        success: false,
        error: 'Se requiere un mensaje para probar'
      });
    }
    
    console.log(`üß™ PRUEBA DE DETECCI√ìN DE NOTIFICACIONES`);
    console.log(`üß™ Mensaje a probar: "${message}"`);
    
    // Ejecutar la funci√≥n de detecci√≥n de notificaciones
    const requiresNotification = checkForNotificationPhrases(message);
    
    console.log(`üß™ Resultado: ${requiresNotification ? 'REQUIERE NOTIFICACI√ìN ‚úÖ' : 'NO REQUIERE NOTIFICACI√ìN ‚ùå'}`);
    
    return res.status(200).json({
      success: true,
      message: `Prueba completada correctamente`,
      requiresNotification: requiresNotification,
      messageAnalyzed: message
    });
  } catch (error) {
    console.error('‚ùå Error al probar detecci√≥n de notificaciones:', error);
    return res.status(500).json({
      success: false,
      error: 'Error interno al probar detecci√≥n de notificaciones'
    });
  }
});

// Iniciar el servidor
app.listen(PORT, () => {
  console.log(`üöÄ Servidor de WhatsApp corriendo en puerto ${PORT}`);
  console.log(`üìã Lista de endpoints disponibles:`);
  console.log(`  GET  /health - Verificar estado del servidor`);
  console.log(`  GET  /messages - Ver √∫ltimos mensajes enviados`);
  console.log(`  POST /api/send-manual-message - Enviar mensaje a WhatsApp`);
  console.log(`  POST /api/send-notification - Enviar notificaci√≥n por correo`);
  console.log(`  POST /api/test-notification-detection - Probar detecci√≥n de notificaciones`);
});

// Exportar funciones para uso en otros archivos
module.exports = {
  checkForNotificationPhrases,
  sendBusinessNotification,
  getNotificationType,
  transporter,
  supabase
};