/**
 * Script de prueba para el sistema de notificaciones
 * 
 * Este script prueba todas las funciones del m√≥dulo notification-patch.js
 * para verificar su correcto funcionamiento.
 */

require('dotenv').config();
const { 
  checkForNotificationPhrases,
  processMessageForNotification,
  sendBusinessNotification,
  sendWhatsAppResponseWithNotification
} = require('./notification-patch');

// Mock de la funci√≥n de env√≠o de mensajes para pruebas
const mockSendFunction = async (phoneNumber, message) => {
  console.log(`üîÑ [SIMULACI√ìN] Enviando mensaje a ${phoneNumber}: ${message}`);
  return {
    success: true,
    messageId: `mock-${Date.now()}`,
    timestamp: new Date().toISOString()
  };
};

// Funci√≥n para ejecutar las pruebas
async function runTests() {
  console.log('üß™ Iniciando pruebas del sistema de notificaciones');
  
  // Test 1: Verificar frases que requieren notificaci√≥n
  console.log('\nüìã TEST 1: Detecci√≥n de frases que requieren notificaci√≥n');
  
  const testMessages = [
    { text: 'Hola, ¬øc√≥mo est√°s?', shouldRequire: false },
    { text: 'No puedo ayudarte con eso, necesitar√°s hablar con un agente humano', shouldRequire: true },
    { text: 'Esto est√° fuera de mi alcance', shouldRequire: true },
    { text: 'Necesito transferirte a un especialista', shouldRequire: true }
  ];
  
  for (const test of testMessages) {
    const result = checkForNotificationPhrases(test.text, 'BOT');
    const match = result.requiresNotification === test.shouldRequire;
    
    console.log(`- Mensaje: "${test.text.substring(0, 40)}${test.text.length > 40 ? '...' : ''}"`);
    console.log(`  ¬øRequiere notificaci√≥n?: ${result.requiresNotification ? 'S√ç ‚úÖ' : 'NO ‚ùå'}`);
    
    if (result.requiresNotification) {
      console.log(`  Coincidencias: ${result.matches.join(', ')}`);
    }
    
    console.log(`  Resultado: ${match ? 'CORRECTO ‚úÖ' : 'INCORRECTO ‚ùå'}`);
  }
  
  // Test 2: Procesar mensaje para notificaci√≥n
  console.log('\nüìã TEST 2: Procesamiento de mensajes para notificaci√≥n');
  
  try {
    const conversationId = 'test-conversation-' + Date.now();
    const phoneNumber = '5215512345678';
    const message = 'Lo siento, esto est√° fuera de mi alcance. Necesitas hablar con un agente humano.';
    
    console.log(`- Procesando mensaje para notificaci√≥n:`);
    console.log(`  Mensaje: "${message}"`);
    console.log(`  Conversaci√≥n: ${conversationId}`);
    console.log(`  Tel√©fono: ${phoneNumber}`);
    
    const result = await processMessageForNotification(message, 'bot', conversationId, phoneNumber);
    
    console.log(`  Resultado: ${JSON.stringify(result, null, 2)}`);
  } catch (error) {
    console.error(`‚ùå Error en Test 2: ${error.message}`);
  }
  
  // Test 3: Env√≠o de notificaci√≥n
  console.log('\nüìã TEST 3: Env√≠o de notificaci√≥n');
  
  try {
    const conversationId = 'test-notification-' + Date.now();
    const phoneNumber = '5215512345678';
    const message = 'Necesitas hablar con un representante. Este es un mensaje de prueba.';
    
    console.log(`- Enviando notificaci√≥n de prueba:`);
    console.log(`  Conversaci√≥n: ${conversationId}`);
    console.log(`  Tel√©fono: ${phoneNumber}`);
    
    const result = await sendBusinessNotification(conversationId, message, phoneNumber);
    
    console.log(`  Notificaci√≥n enviada: ${result ? 'S√ç ‚úÖ' : 'NO ‚ùå'}`);
  } catch (error) {
    console.error(`‚ùå Error en Test 3: ${error.message}`);
  }
  
  // Test 4: Prueba de sendWhatsAppResponseWithNotification
  console.log('\nüìã TEST 4: Env√≠o de mensaje con verificaci√≥n de notificaci√≥n');
  
  try {
    const phoneNumber = '5215512345678';
    const conversationId = 'test-whatsapp-' + Date.now();
    
    // Caso 1: Mensaje que no requiere notificaci√≥n
    const normalMessage = 'Hola, soy el asistente virtual. ¬øEn qu√© puedo ayudarte?';
    
    console.log(`- Enviando mensaje normal (no deber√≠a notificar):`);
    console.log(`  Mensaje: "${normalMessage}"`);
    
    const normalResult = await sendWhatsAppResponseWithNotification(phoneNumber, normalMessage, {
      sendFunction: mockSendFunction,
      conversationId
    });
    
    console.log(`  Resultado: ${JSON.stringify(normalResult, null, 2)}`);
    
    // Caso 2: Mensaje que requiere notificaci√≥n
    const notifyMessage = 'No puedo procesar tu solicitud. Necesitas hablar con un agente humano.';
    
    console.log(`\n- Enviando mensaje que requiere notificaci√≥n:`);
    console.log(`  Mensaje: "${notifyMessage}"`);
    
    const notifyResult = await sendWhatsAppResponseWithNotification(phoneNumber, notifyMessage, {
      sendFunction: mockSendFunction,
      conversationId
    });
    
    console.log(`  Resultado: ${JSON.stringify(notifyResult, null, 2)}`);
    
    // Caso 3: Omitir verificaci√≥n de notificaci√≥n
    console.log(`\n- Omitiendo verificaci√≥n de notificaci√≥n:`);
    
    const skipResult = await sendWhatsAppResponseWithNotification(phoneNumber, notifyMessage, {
      sendFunction: mockSendFunction,
      conversationId,
      skipNotificationCheck: true
    });
    
    console.log(`  Resultado: ${JSON.stringify(skipResult, null, 2)}`);
  } catch (error) {
    console.error(`‚ùå Error en Test 4: ${error.message}`);
  }
  
  console.log('\n‚úÖ Pruebas completadas');
}

// Ejecutar las pruebas
console.log('üöÄ Iniciando script de prueba de notificaciones');
runTests()
  .then(() => console.log('üéâ Script finalizado'))
  .catch(error => {
    console.error(`‚ùå Error en la ejecuci√≥n del script: ${error.message}`);
    console.error(error.stack);
  }); 