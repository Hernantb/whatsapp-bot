const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://wscijkxwevgxbgwhbqtm.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndzY2lqa3h3ZXZneGJnd2hicXRtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE4MjI3NjgsImV4cCI6MjA1NzM5ODc2OH0._HSnvof7NUk6J__qqq3gJvbJRZnItCAmlI5HYAL8WVI';
const CONVERSATION_ID = '4a42aa05-2ffd-418b-aa52-29e7c571eee8'; // ID de la conversaci√≥n que tiene m√°s de 1000 mensajes
const KEEP_RECENT = 200; // N√∫mero de mensajes recientes a mantener

const supabase = createClient(supabaseUrl, supabaseKey);

async function cleanOldMessages() {
    try {
        console.log('üîç Iniciando limpieza de mensajes antiguos...');
        
        // 1. Contar el total de mensajes para esta conversaci√≥n
        const { count, error: countError } = await supabase
            .from('messages')
            .select('id', { count: 'exact', head: true })
            .eq('conversation_id', CONVERSATION_ID);
            
        if (countError) {
            console.error('‚ùå Error contando mensajes:', countError);
            return;
        }
        
        console.log(`üìä Total de mensajes para la conversaci√≥n: ${count}`);
        
        if (count <= KEEP_RECENT) {
            console.log('‚úÖ No es necesario eliminar mensajes, hay menos que el l√≠mite de retenci√≥n');
            return;
        }
        
        const toDelete = count - KEEP_RECENT;
        console.log(`üóëÔ∏è Se eliminar√°n ${toDelete} mensajes antiguos, manteniendo los ${KEEP_RECENT} m√°s recientes`);
        
        // 2. Obtener los IDs de los mensajes a eliminar (los m√°s antiguos)
        const { data: oldMessages, error: fetchError } = await supabase
            .from('messages')
            .select('id')
            .eq('conversation_id', CONVERSATION_ID)
            .order('created_at', { ascending: true })
            .limit(toDelete);
            
        if (fetchError) {
            console.error('‚ùå Error obteniendo mensajes antiguos:', fetchError);
            return;
        }
        
        console.log(`üîç Encontrados ${oldMessages.length} mensajes antiguos para eliminar`);
        
        if (oldMessages.length === 0) {
            console.log('‚úÖ No hay mensajes para eliminar');
            return;
        }
        
        // Extraer solo los IDs para eliminar
        const idsToDelete = oldMessages.map(msg => msg.id);
        
        // 3. Eliminar los mensajes antiguos
        const { error: deleteError } = await supabase
            .from('messages')
            .delete()
            .in('id', idsToDelete);
            
        if (deleteError) {
            console.error('‚ùå Error eliminando mensajes:', deleteError);
            return;
        }
        
        console.log(`‚úÖ Se eliminaron ${idsToDelete.length} mensajes antiguos exitosamente`);
        console.log('üîÑ Ahora deber√≠as poder ver los mensajes m√°s recientes en el dashboard');
        
    } catch (error) {
        console.error('‚ùå Error general:', error);
    }
}

// Ejecutar la funci√≥n principal
cleanOldMessages(); 