import { createClient } from '@supabase/supabase-js'

// Claves de Supabase directas actualizadas con las proporcionadas por el usuario
const DIRECT_URL = 'https://wscijkxwevgxbgwhbqtm.supabase.co'
const DIRECT_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndzY2lqa3h3ZXZneGJnd2hicXRtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE4MjI3NjgsImV4cCI6MjA1NzM5ODc2OH0._HSnvof7NUk6J__qqq3gJvbJRZnItCAmlI5HYAL8WVI'

// Habilitar logs solo en ambiente de desarrollo cuando se necesita debug
const DEBUG = false;

if (DEBUG) {
  console.log('üîÑ Creando cliente Supabase con URL:', DIRECT_URL)
  console.log('üîë Usando clave anon actualizada (primeros 10 caracteres):', DIRECT_KEY.substring(0, 10) + '...')
}

// Crear UNA SOLA instancia del cliente Supabase para toda la aplicaci√≥n
// Esto evita la advertencia "Multiple GoTrueClient instances"
export const supabase = createClient(DIRECT_URL, DIRECT_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    storageKey: 'supabase.auth.token',
  },
  global: {
    headers: {
      'x-client-info': 'chat-control-panel/1.0.0',
    },
  },
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
})

// Registrar canales activos para evitar duplicados
const activeChannels = new Map();

// Configuraci√≥n global para el canal de realtime
export const setupRealtimeChannels = () => {
  // Canal de mensajes global que podemos reutilizar
  const messagesChannel = supabase.channel('public:messages');
  
  // Conectar el canal pero sin suscripciones espec√≠ficas todav√≠a
  messagesChannel.subscribe((status) => {
    if (status === 'SUBSCRIBED') {
      if (DEBUG) {
        console.log('‚úÖ Canal global de mensajes conectado correctamente');
      }
    } else if (status === 'CHANNEL_ERROR') {
      if (DEBUG) {
        console.error('‚ùå Error en el canal de mensajes');
      }
    }
  });
  
  // Devolver el canal para uso posterior
  return messagesChannel;
}

/**
 * Suscribirse a mensajes para una conversaci√≥n espec√≠fica
 * @param conversationId ID de la conversaci√≥n a la que suscribirse
 * @param callback Funci√≥n que se ejecutar√° cuando llegue un nuevo mensaje
 * @returns Objeto con m√©todo unsubscribe para cancelar la suscripci√≥n
 */
export function subscribeToConversationMessages(
  conversationId: string, 
  callback: (payload: any) => void
) {
  if (!conversationId) {
    console.error('‚ùå No se puede suscribir: conversationId es requerido');
    return { unsubscribe: () => {} };
  }

  // Solo log en consola para debugging en desarrollo
  const isDev = process.env.NODE_ENV === 'development';
  const log = (message: string) => {
    if (isDev) console.log(message);
  };

  log(`üîî Creando suscripci√≥n para conversaci√≥n: ${conversationId.substring(0, 8)}...`);
  
  // Variable para controlar intentos de reconexi√≥n
  let reconnectAttempts = 0;
  const MAX_RECONNECT_ATTEMPTS = 3;
  let reconnectTimeout: NodeJS.Timeout | null = null;
  
  // Mejorar la confiabilidad de las suscripciones
  let channel = supabase
    .channel(`messages:${conversationId}`)
    .on('postgres_changes', {
      event: 'INSERT',
      schema: 'public',
      table: 'messages',
      filter: `conversation_id=eq.${conversationId}`,
    }, (payload) => {
      log(`üì® Mensaje recibido en tiempo real: ${payload.new.sender_type}:${payload.new.content?.substring(0, 20)}...`);
      callback(payload);
    })
    .on('presence', { event: 'sync' }, () => {
      log('üü¢ Presencia sincronizada');
    })
    .on('system', { event: 'disconnect' }, () => {
      if (reconnectAttempts >= MAX_RECONNECT_ATTEMPTS) {
        log(`‚ö†Ô∏è Desconexi√≥n detectada pero se alcanz√≥ el l√≠mite de intentos (${MAX_RECONNECT_ATTEMPTS})`);
        return;
      }
      
      reconnectAttempts++;
      log(`‚ö†Ô∏è Desconexi√≥n detectada, intento ${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS}`);
      
      // Limpiar timeout previo si existe
      if (reconnectTimeout) {
        clearTimeout(reconnectTimeout);
      }
      
      // Esperar un tiempo progresivamente mayor entre intentos
      const delayMs = 1000 * reconnectAttempts;
      reconnectTimeout = setTimeout(() => {
        try {
          // En lugar de intentar suscribirse nuevamente (lo que causa error),
          // simplemente crear un nuevo canal con la misma configuraci√≥n
          channel.unsubscribe().then(() => {
            log(`üîÑ Creando nuevo canal para ${conversationId.substring(0, 8)}...`);
            
            const newChannel = supabase
              .channel(`messages:${conversationId}:${Date.now()}`)
              .on('postgres_changes', {
                event: 'INSERT',
                schema: 'public',
                table: 'messages',
                filter: `conversation_id=eq.${conversationId}`,
              }, (payload) => {
                log(`üì® Mensaje recibido en tiempo real: ${payload.new.sender_type}:${payload.new.content?.substring(0, 20)}...`);
                callback(payload);
              })
              .subscribe(status => {
                if (status === 'SUBSCRIBED') {
                  log(`‚úÖ Reconexi√≥n exitosa en intento ${reconnectAttempts}`);
                  reconnectAttempts = 0; // Reiniciar contador
                }
              });
            
            // Reemplazar el canal antiguo con el nuevo
            channel = newChannel;
          });
        } catch (err) {
          log(`‚ùå Error al intentar reconectar: ${err}`);
        }
      }, delayMs);
    })
    .subscribe(status => {
      if (status === 'SUBSCRIBED') {
        log(`‚úÖ Suscripci√≥n activa para ${conversationId.substring(0, 8)}`);
        // Reiniciar contador de intentos tras conexi√≥n exitosa
        reconnectAttempts = 0;
      } else if (status === 'CHANNEL_ERROR') {
        log(`‚ùå Error en canal ${conversationId.substring(0, 8)}: ${status}`);
      } else {
        log(`‚ÑπÔ∏è Estado de suscripci√≥n: ${status}`);
      }
    });

  // Devolver un objeto con m√©todo unsubscribe
  return {
    unsubscribe: () => {
      log(`üîî Cancelando suscripci√≥n para ${conversationId.substring(0, 8)}...`);
      if (reconnectTimeout) {
        clearTimeout(reconnectTimeout);
      }
      return channel.unsubscribe();
    }
  };
}

// Funci√≥n de utilidad para obtener la sesi√≥n actual con manejo de errores mejorado
export const getCurrentSession = async () => {
  try {
    // Intentar obtener la sesi√≥n del cliente
    const { data: { session }, error } = await supabase.auth.getSession()
    
    if (error) {
      if (DEBUG) {
        console.error('Error al obtener la sesi√≥n:', error)
      }
      return null
    }
    
    // Si no hay sesi√≥n pero hay token en localStorage, intentar recuperarla
    if (!session && typeof window !== 'undefined') {
      const token = localStorage.getItem('supabase.auth.token')
      if (token) {
        if (DEBUG) {
          console.log('Intentando recuperar sesi√≥n desde token almacenado')
        }
        try {
          // Refrescar la sesi√≥n
          const { data: refreshData, error: refreshError } = await supabase.auth.refreshSession()
          
          if (refreshError) {
            if (DEBUG) {
              console.error('Error al refrescar la sesi√≥n:', refreshError)
            }
            return null
          }
          
          return refreshData.session
        } catch (refreshError) {
          if (DEBUG) {
            console.error('Error inesperado al refrescar sesi√≥n:', refreshError)
          }
          return null
        }
      }
    }
    
    return session
  } catch (error) {
    if (DEBUG) {
      console.error('Error inesperado al obtener la sesi√≥n:', error)
    }
    return null
  }
}

// Function to get business_id for a user
export const getBusinessId = async (userId: string) => {
  if (!userId) {
    if (DEBUG) {
      console.error('[supabase] userId es undefined o null en getBusinessId')
    }
    return null
  }

  try {
    if (DEBUG) {
      console.log(`[supabase] Buscando business_id para usuario: ${userId}`)
    }
    
    // Verificar si ya tenemos el business_id en localStorage para este usuario
    if (typeof window !== 'undefined') {
      const storedId = localStorage.getItem('businessId');
      if (storedId) {
        if (DEBUG) {
          console.log(`[supabase] Business ID encontrado en localStorage: ${storedId}. Verificando si es v√°lido...`);
        }
        
        // Verificar que el ID almacenado es v√°lido para este usuario
        const { data: validCheck, error: validError } = await supabase
          .from('business_users')
          .select('business_id')
          .eq('user_id', userId)
          .eq('business_id', storedId)
          .eq('is_active', true)
          .maybeSingle();
          
        if (!validError && validCheck?.business_id) {
          if (DEBUG) {
            console.log(`[supabase] Business ID en localStorage verificado como v√°lido: ${validCheck.business_id}`);
          }
          return {
            businessId: validCheck.business_id,
            role: 'verified'
          };
        } else {
          if (DEBUG) {
            console.warn(`[supabase] Business ID en localStorage no es v√°lido para este usuario o hay un error:`, validError);
          }
          // Continuar con la consulta normal
        }
      }
    }
    
    // Obtener el business_id de la base de datos
    const { data, error } = await supabase
      .from('business_users')
      .select('business_id, role')
      .eq('user_id', userId)
      .eq('is_active', true)
      .maybeSingle()

    if (error) {
      if (DEBUG) {
        console.error('[supabase] Error al obtener business_id:', error);
      }
      
      // Depuraci√≥n: buscar business_users disponibles
      const { data: allUsers, error: allUsersError } = await supabase
        .from('business_users')
        .select('user_id, business_id')
        .limit(5);
        
      if (!allUsersError && allUsers?.length > 0) {
        if (DEBUG) {
          console.log('[supabase] Algunos business_users disponibles:', 
            JSON.stringify(allUsers.map(u => ({ user: u.user_id, business: u.business_id })))
          );
        }
      }
      
      return null;
    }

    if (!data?.business_id) {
      if (DEBUG) {
        console.error(`[supabase] Usuario ${userId} no tiene acceso a ning√∫n negocio (o no est√° activo)`);
      }
      
      // Depuraci√≥n: buscar si hay negocios disponibles
      const { data: businesses, error: bizError } = await supabase
        .from('businesses')
        .select('id, name')
        .limit(5);
        
      if (!bizError && businesses?.length > 0) {
        if (DEBUG) {
          console.log('[supabase] Algunos negocios disponibles:', 
            JSON.stringify(businesses.map(b => ({ id: b.id, name: b.name })))
          );
        }
      }
      
      return null;
    }

    if (DEBUG) {
      console.log(`[supabase] Business ID encontrado para usuario ${userId}: ${data.business_id}`);
    }
    
    // Guardar en localStorage para futuros usos
    if (typeof window !== 'undefined') {
      localStorage.setItem('businessId', data.business_id);
      localStorage.setItem('userRole', data.role || 'viewer');
    }
    
    return {
      businessId: data.business_id,
      role: data.role
    };
  } catch (error) {
    if (DEBUG) {
      console.error('[supabase] Error inesperado al obtener business_id:', error);
    }
    return null;
  }
}

// Types
export interface Message {
  id: string
  created_at: string
  content: string
  role: string
  conversation_id: string
  metadata?: any
}

export interface Conversation {
  id: string
  created_at: string
  title: string
  business_id: string
  metadata?: any
}

export interface Profile {
  id: string
  created_at: string
  email: string
  full_name: string
  avatar_url?: string
  metadata?: any
}

export interface Business {
  id: string
  created_at: string
  name: string
  owner_id: string
  metadata?: any
}

// Limpiar todas las suscripciones al desmontar la aplicaci√≥n
export const cleanupAllSubscriptions = () => {
  // Iterar sobre todas las suscripciones activas
  for (const [channelName, subscription] of activeChannels.entries()) {
    try {
      if (subscription && subscription.unsubscribe) {
        subscription.unsubscribe();
      }
    } catch (error) {
      console.error(`Error al limpiar suscripci√≥n ${channelName}:`, error);
    }
  }
  
  // Limpiar el mapa
  activeChannels.clear();
  console.log('üßπ Todas las suscripciones han sido limpiadas');
}

// Funci√≥n de diagn√≥stico para probar las credenciales de Supabase
export const testSupabaseConnection = async () => {
  try {
    if (DEBUG) {
      console.log('üß™ Probando conexi√≥n a Supabase...');
      console.log('üîë URL:', process.env.NEXT_PUBLIC_SUPABASE_URL);
      console.log('üîë Key:', process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY?.substring(0, 10) + '...' + process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY?.substring(process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY.length - 5));
    }
    
    // Probar con una consulta simple a una tabla p√∫blica
    const { data, error } = await supabase
      .from('businesses')
      .select('count')
      .limit(1);
    
    if (error) {
      if (DEBUG) {
        console.error('‚ùå Error al conectar con Supabase:', error);
      }
      return {
        success: false,
        error: error.message,
        details: error
      };
    }
    
    if (DEBUG) {
      console.log('‚úÖ Conexi√≥n a Supabase establecida con √©xito');
    }
    
    // Probar autenticaci√≥n an√≥nima
    const { data: authData, error: authError } = await supabase.auth.getSession();
    
    if (authError) {
      if (DEBUG) {
        console.error('‚ö†Ô∏è Error al verificar sesi√≥n:', authError);
      }
    } else {
      if (DEBUG) {
        console.log('‚úÖ Cliente de autenticaci√≥n funcionando correctamente');
      }
    }
    
    return {
      success: true,
      data: data,
      authStatus: authData ? 'session-ready' : 'no-active-session'
    };
    
  } catch (error) {
    if (DEBUG) {
      console.error('‚ùå Error cr√≠tico al probar Supabase:', error);
    }
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Error desconocido',
      details: error
    };
  }
}; 