// notification-patch.cjs - M√≥dulo para enviar notificaciones cuando un mensaje del bot requiere atenci√≥n humana
require('dotenv').config();
const nodemailer = require('nodemailer');

// Importar configuraci√≥n de Supabase
const { supabase } = require('./supabase-config.cjs');

// Configuraci√≥n para env√≠o de correos
const EMAIL_USER = process.env.EMAIL_USER || 'bexorai@gmail.com';
const EMAIL_APP_PASSWORD = process.env.EMAIL_APP_PASSWORD;
const EMAIL_TO_DEFAULT = process.env.EMAIL_TO || 'bexorai@gmail.com';

// Verificar configuraci√≥n
console.log(`üìß Configuraci√≥n de notificaciones por correo:`);
console.log(`üìß Correo remitente: ${EMAIL_USER}`);
console.log(`üìß Correo destinatario predeterminado: ${EMAIL_TO_DEFAULT}`);
console.log(`üìß Contrase√±a configurada: ${EMAIL_APP_PASSWORD ? '‚úÖ S√ç' : '‚ùå NO'}`);

// Configurar transport de correo
const mailTransport = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: EMAIL_USER,
    pass: EMAIL_APP_PASSWORD
  }
});

// Lista de frases que indican que se necesita atenci√≥n humana
const NOTIFICATION_PHRASES = [
  "¬°Perfecto! tu cita ha sido confirmada para",
  "¬°Perfecto! un asesor te llamar√°",
  "¬°Perfecto! un asesor te contactar√°",
  "¬°Perfecto! una persona te contactar√°"
];

/**
 * Verifica si un mensaje contiene alguna de las frases que indican necesidad de atenci√≥n
 * @param {string} message - El mensaje a revisar
 * @returns {boolean} - True si el mensaje contiene alguna de las frases de notificaci√≥n
 */
function checkForNotificationPhrases(message) {
  if (!message) return false;
  
  // Normalizar el mensaje (convertir a min√∫sculas, eliminar espacios extras)
  const normalizedMessage = message.toLowerCase().trim();
  
  // Verificar cada frase
  for (const phrase of NOTIFICATION_PHRASES) {
    const normalizedPhrase = phrase.toLowerCase().trim();
    
    if (normalizedMessage.includes(normalizedPhrase)) {
      console.log(`üîî Frase detectada: "${phrase}"`);
      return true;
    }
  }
  
  return false;
}

/**
 * Procesa un mensaje para determinar si se debe enviar una notificaci√≥n
 * @param {string} message - El mensaje a procesar
 * @param {string} conversationId - ID de la conversaci√≥n
 * @param {string} phoneNumber - N√∫mero de tel√©fono del cliente (opcional)
 * @returns {Object} - Resultado del procesamiento
 */
async function processMessageForNotification(message, conversationId, phoneNumber = null) {
  try {
    // Verificar si el mensaje contiene alguna frase que requiera notificaci√≥n
    const requiresNotification = checkForNotificationPhrases(message);
    
    if (!requiresNotification) {
      return { 
        requiresNotification: false,
        notificationSent: false 
      };
    }
    
    console.log(`üîî Notificaci√≥n requerida para conversaci√≥n: ${conversationId}`);
    
    // Si no tenemos el n√∫mero de tel√©fono o ID del negocio, intentar obtenerlos de la base de datos
    let clientPhone = phoneNumber;
    let businessId = null;
    
    // Obtener informaci√≥n de la conversaci√≥n desde Supabase
    try {
      console.log(`üîç Obteniendo informaci√≥n de conversaci√≥n: ${conversationId}`);
      const { data: conversationData, error: conversationError } = await supabase
        .from('conversations')
        .select('user_id, business_id')
        .eq('id', conversationId)
        .single();
      
      if (conversationError) {
        console.error(`‚ùå Error obteniendo datos de conversaci√≥n: ${conversationError.message}`);
      } else if (conversationData) {
        clientPhone = conversationData.user_id;
        businessId = conversationData.business_id;
        console.log(`‚úÖ Datos de conversaci√≥n obtenidos: phone=${clientPhone}, businessId=${businessId}`);
      }
    } catch (dbError) {
      console.error(`‚ùå Error consultando conversaci√≥n: ${dbError.message}`);
    }
    
    if (!businessId) {
      console.error(`‚ùå No se pudo obtener el ID del negocio para la conversaci√≥n: ${conversationId}`);
      return {
        requiresNotification: true,
        notificationSent: false,
        error: 'No se pudo determinar el negocio asociado a la conversaci√≥n'
      };
    }
    
    // Valores predeterminados
    let businessEmail = EMAIL_TO_DEFAULT;
    let businessName = "Negocio";
    let foundValidEmail = false;
    
    // PASO 1: Obtener datos del negocio
    try {
      console.log(`üîç Obteniendo datos del negocio: ${businessId}`);
      const { data: businessData, error: businessError } = await supabase
        .from('businesses')
        .select('*')
        .eq('id', businessId)
        .single();
      
      if (businessError) {
        console.error(`‚ùå Error obteniendo datos del negocio: ${businessError.message}`);
      } else if (businessData) {
        console.log(`‚úÖ Datos del negocio obtenidos: ${JSON.stringify(businessData)}`);
        
        // Guardar nombre del negocio
        if (businessData.name) {
          businessName = businessData.name;
        }
        
        // PASO 2: Obtener propietario del negocio (si existe owner_id)
        const ownerId = businessData.owner_id;
        if (ownerId) {
          console.log(`üîç Buscando perfil del propietario: ${ownerId}`);
          
          // Obtener perfil del propietario
          const { data: ownerProfile, error: ownerError } = await supabase
            .from('profiles')
            .select('email, name, full_name')
            .eq('id', ownerId)
            .single();
          
          if (ownerError) {
            console.error(`‚ùå Error obteniendo perfil del propietario: ${ownerError.message}`);
          } else if (ownerProfile && ownerProfile.email) {
            businessEmail = ownerProfile.email;
            foundValidEmail = true;
            console.log(`‚úÖ Correo del propietario encontrado: ${businessEmail}`);
            
            // Si el perfil tiene nombre, usarlo si a√∫n no tenemos nombre del negocio
            if (!businessName && (ownerProfile.full_name || ownerProfile.name)) {
              businessName = ownerProfile.full_name || ownerProfile.name;
            }
          }
        }
      }
    } catch (businessError) {
      console.error(`‚ùå Error consultando informaci√≥n del negocio: ${businessError.message}`);
    }
    
    // PASO 3: Si no encontramos el correo, buscar usuarios relacionados al negocio
    if (!foundValidEmail) {
      try {
        console.log(`üîç Buscando usuarios relacionados con el negocio: ${businessId}`);
        const { data: businessUsers, error: buError } = await supabase
          .from('business_users')
          .select('user_id, role')
          .eq('business_id', businessId)
          .eq('is_active', true);
        
        if (buError) {
          console.error(`‚ùå Error obteniendo usuarios del negocio: ${buError.message}`);
        } else if (businessUsers && businessUsers.length > 0) {
          console.log(`‚úÖ Encontrados ${businessUsers.length} usuarios asociados al negocio`);
          
          // Ordenar por rol (owner primero, luego admin, luego otros)
          businessUsers.sort((a, b) => {
            if (a.role === 'owner') return -1;
            if (b.role === 'owner') return 1;
            if (a.role === 'admin') return -1;
            if (b.role === 'admin') return 1;
            return 0;
          });
          
          // Obtener IDs de usuarios para buscar sus perfiles
          const userIds = businessUsers.map(bu => bu.user_id);
          
          // Buscar perfiles de usuarios
          const { data: profiles, error: profilesError } = await supabase
            .from('profiles')
            .select('id, email, name, full_name')
            .in('id', userIds);
          
          if (profilesError) {
            console.error(`‚ùå Error obteniendo perfiles de usuarios: ${profilesError.message}`);
          } else if (profiles && profiles.length > 0) {
            console.log(`‚úÖ Encontrados ${profiles.length} perfiles de usuarios`);
            
            // Crear un mapa de roles para optimizar la b√∫squeda
            const userRoles = {};
            businessUsers.forEach(bu => {
              userRoles[bu.user_id] = bu.role;
            });
            
            // Ordenar perfiles por rol (owner primero)
            profiles.sort((a, b) => {
              const roleA = userRoles[a.id] || '';
              const roleB = userRoles[b.id] || '';
              if (roleA === 'owner') return -1;
              if (roleB === 'owner') return 1;
              if (roleA === 'admin') return -1;
              if (roleB === 'admin') return 1;
              return 0;
            });
            
            // Buscar el primer perfil con email v√°lido
            for (const profile of profiles) {
              if (profile.email && profile.email.includes('@')) {
                businessEmail = profile.email;
                foundValidEmail = true;
                console.log(`‚úÖ Correo encontrado en perfil de usuario (${userRoles[profile.id] || 'user'}): ${businessEmail}`);
                break;
              }
            }
          }
        }
      } catch (usersError) {
        console.error(`‚ùå Error consultando usuarios relacionados: ${usersError.message}`);
      }
    }
    
    // Caso espec√≠fico para Hern√°n Tenorio (por ID de negocio)
    if (businessId === '2d385aa5-40e0-4ec9-9360-19281bc605e4' && (!foundValidEmail || businessEmail === EMAIL_TO_DEFAULT)) {
      businessEmail = 'hernan.baigts@gmail.com';
      businessName = 'Hern√°n Tenorio';
      foundValidEmail = true;
      console.log(`‚ö†Ô∏è Usando correo espec√≠fico para Hern√°n Tenorio: ${businessEmail}`);
    }
    
    // Si despu√©s de todos los intentos no encontramos un correo v√°lido, usar el predeterminado
    if (!foundValidEmail) {
      console.warn(`‚ö†Ô∏è No se encontr√≥ correo v√°lido para el negocio ${businessId}`);
      console.log(`‚ö†Ô∏è Usando correo predeterminado: ${EMAIL_TO_DEFAULT}`);
    } else {
      console.log(`‚úÖ Se utilizar√° correo espec√≠fico del negocio: ${businessEmail}`);
    }
    
    // Enviar notificaci√≥n por correo
    const notificationSent = await sendBusinessNotification(
      message,
      conversationId,
      clientPhone,
      businessEmail,
      businessId,
      businessName
    );
    
    return {
      requiresNotification: true,
      notificationSent,
      businessEmail,
      businessName
    };
  } catch (error) {
    console.error(`‚ùå Error en processMessageForNotification: ${error.message}`);
    return {
      requiresNotification: false,
      notificationSent: false,
      error: error.message
    };
  }
}

/**
 * Obtiene los √∫ltimos mensajes de una conversaci√≥n
 * @param {string} conversationId - ID de la conversaci√≥n
 * @param {number} limit - N√∫mero m√°ximo de mensajes a obtener
 * @returns {Array} - Lista de mensajes ordenados cronol√≥gicamente
 */
async function getLastMessages(conversationId, limit = 20) {
  try {
    console.log(`üîç Obteniendo √∫ltimos ${limit} mensajes de conversaci√≥n: ${conversationId}`);
    
    const { data, error } = await supabase
      .from('messages')
      .select('*')
      .eq('conversation_id', conversationId)
      .order('created_at', { ascending: false })
      .limit(limit);
    
    if (error) {
      console.error(`‚ùå Error obteniendo mensajes: ${error.message}`);
      return [];
    }
    
    // Invertir para tener orden cronol√≥gico (m√°s antiguos primero)
    return data.reverse();
  } catch (error) {
    console.error(`‚ùå Error consultando mensajes: ${error.message}`);
    return [];
  }
}

/**
 * Env√≠a una notificaci√≥n por correo electr√≥nico
 * @param {string} message - El mensaje del bot
 * @param {string} conversationId - ID de la conversaci√≥n
 * @param {string} phoneNumber - N√∫mero de tel√©fono del cliente
 * @param {string} emailTo - Correo electr√≥nico de destino
 * @param {string} businessId - ID del negocio
 * @param {string} businessName - Nombre del negocio
 * @returns {boolean} - True si la notificaci√≥n se envi√≥ correctamente
 */
async function sendBusinessNotification(message, conversationId, phoneNumber, emailTo, businessId, businessName = 'BEXOR') {
  try {
    if (!EMAIL_APP_PASSWORD) {
      console.error('‚ö†Ô∏è IMPORTANTE: No se puede enviar notificaci√≥n por correo: falta configurar EMAIL_APP_PASSWORD');
      console.error('‚ö†Ô∏è Agrega la variable EMAIL_APP_PASSWORD a las variables de entorno en Render');
      console.error('‚ö†Ô∏è Mensaje que requiere atenci√≥n: ' + message.substring(0, 100));
      console.error('‚ö†Ô∏è Tel√©fono del cliente: ' + phoneNumber);
      console.error('‚ö†Ô∏è ID del negocio: ' + businessId);
      console.error('‚ö†Ô∏è Correo de destino: ' + emailTo);
      
      // Registrar la falta de configuraci√≥n pero no fallar
      return false;
    }
    
    // Obtener los √∫ltimos 20 mensajes de la conversaci√≥n
    const lastMessages = await getLastMessages(conversationId, 20);
    console.log(`‚úÖ Obtenidos ${lastMessages.length} mensajes para incluir en la notificaci√≥n`);
    
    // Formatear el mensaje para el correo
    const formattedPhone = phoneNumber ? phoneNumber : 'No disponible';
    const timestamp = new Date().toLocaleString('es-ES', { 
      timeZone: 'America/Mexico_City'
    });
    
    // Generar HTML con el historial de mensajes
    let messagesHtml = '';
    if (lastMessages && lastMessages.length > 0) {
      messagesHtml = `
        <h3>üìù Historial de mensajes recientes:</h3>
        <div style="background-color: #f9f9f9; padding: 10px; border-radius: 5px; margin: 10px 0; max-height: 400px; overflow-y: auto;">
      `;
      
      // Obtener n√∫mero o ID de negocio para verificaci√≥n
      const businessIdOrPhone = businessId || 'business';
      
      // Log para depuraci√≥n
      console.log('üîç CLASIFICACI√ìN DE MENSAJES EN EMAIL:');
      console.log(`üì± Tel√©fono del cliente: ${phoneNumber}`);
      console.log(`üè¢ ID del negocio: ${businessId}`);
      
      lastMessages.forEach(msg => {
        // Log detallado de cada mensaje para depuraci√≥n
        console.log(`
üì© MENSAJE ORIGINAL (ID: ${msg.id?.substring(0,8) || 'N/A'}):
   - is_from_business: ${msg.is_from_business}
   - source_type: ${msg.source_type || 'N/A'}
   - sender_id: ${msg.sender_id || 'N/A'}
   - role: ${msg.role || 'N/A'}
   - Contenido: "${msg.content?.substring(0,40)}..."
        `);
        
        // NUEVA L√ìGICA: Confiar SOLO en metadatos, NUNCA en el contenido del mensaje
        // Un mensaje es del bot/dashboard SOLO si:
        // 1. is_from_business === true, O
        // 2. source_type es 'bot', 'ai', 'openai', 'assistant', 'dashboard', O
        // 3. sender_id coincide con el ID del negocio/no es el tel√©fono del cliente, O
        // 4. role es 'assistant'
        
        let isFromBot = false;
        
        // Verificar por is_from_business (fuente principal de verdad)
        if (msg.is_from_business === true) {
          isFromBot = true;
          console.log(`   ‚úì BOT/DASHBOARD: Detectado por is_from_business`);
        }
        // Verificar por source_type
        else if (msg.source_type && ['bot', 'ai', 'openai', 'assistant', 'dashboard'].includes(msg.source_type.toLowerCase())) {
          isFromBot = true;
          console.log(`   ‚úì BOT/DASHBOARD: Detectado por source_type: ${msg.source_type}`);
        }
        // Verificar por sender_id
        else if (msg.sender_id) {
          // Si el sender_id NO es el n√∫mero del cliente, probablemente sea del bot/negocio
          if (msg.sender_id !== phoneNumber && (msg.sender_id === businessIdOrPhone || msg.sender_id.includes('business'))) {
            isFromBot = true;
            console.log(`   ‚úì BOT/DASHBOARD: Detectado por sender_id: ${msg.sender_id}`);
          } else {
            console.log(`   ‚úì CLIENTE: Detectado por sender_id: ${msg.sender_id}`);
          }
        }
        // Verificar por role
        else if (msg.role === 'assistant') {
          isFromBot = true;
          console.log(`   ‚úì BOT/DASHBOARD: Detectado por role: ${msg.role}`);
        }
        else {
          console.log(`   ‚úì CLIENTE: Por defecto, no cumple ning√∫n criterio de bot/dashboard`);
        }
        
        // Verificar si es el mensaje trigger
        const isTriggerMessage = msg.content === message;
        
        // Estilos para bot (verde a la derecha) vs cliente (blanco a la izquierda)
        const msgStyle = isFromBot 
          ? 'background-color: #DCF8C6; padding: 8px; border-radius: 5px; margin: 5px 0; display: inline-block; max-width: 80%; text-align: right; float: right; clear: both;' 
          : 'background-color: #FFFFFF; padding: 8px; border-radius: 5px; margin: 5px 0; display: inline-block; max-width: 80%; text-align: left; float: left; clear: both;';
        
        // Destacar mensaje trigger
        const highlightStyle = isTriggerMessage 
          ? 'border: 2px solid #FF0000; box-shadow: 0 0 5px rgba(255, 0, 0, 0.5);' 
          : '';
        
        // Formatear hora del mensaje
        const msgTime = new Date(msg.created_at).toLocaleTimeString('es-ES', {
          hour: '2-digit',
          minute: '2-digit'
        });
        
        // Generar HTML para cada mensaje
        messagesHtml += `
          <div style="overflow: hidden; margin-bottom: 10px;">
            <div style="${msgStyle} ${highlightStyle}">
              <div style="font-size: 0.8em; color: #777;">${isFromBot ? 'Bot/Dashboard' : 'Cliente'} - ${msgTime}</div>
              <div>${msg.content.replace(/\n/g, '<br>')}</div>
              ${isTriggerMessage ? '<div style="color: #FF0000; font-weight: bold; margin-top: 5px;">‚ö†Ô∏è MENSAJE QUE ACTIV√ì LA NOTIFICACI√ìN</div>' : ''}
            </div>
          </div>
        `;
      });
      
      messagesHtml += `
        </div>
      `;
    }
    
    // Crear contenido del correo
    const emailSubject = `üîî Atenci√≥n requerida: Cliente en WhatsApp (${formattedPhone})`;
    const emailHtml = `
      <h2>ü§ñ Notificaci√≥n de Bot de WhatsApp - ${businessName}</h2>
      <p><strong>Se requiere atenci√≥n humana para un cliente.</strong></p>
      <hr>
      <p><strong>üì± N√∫mero de tel√©fono:</strong> ${formattedPhone}</p>
      <p><strong>üÜî ID de conversaci√≥n:</strong> ${conversationId}</p>
      <p><strong>üè¢ ID de negocio:</strong> ${businessId || 'No disponible'}</p>
      <p><strong>‚è∞ Fecha y hora:</strong> ${timestamp}</p>
      <p><strong>üí¨ Mensaje del bot que gener√≥ la alerta:</strong></p>
      <div style="background-color: #f4f4f4; padding: 15px; border-radius: 5px; margin: 10px 0; border: 2px solid #FF0000;">
        ${message.replace(/\n/g, '<br>')}
      </div>
      ${messagesHtml}
      <hr>
      <p>Por favor, contin√∫e la conversaci√≥n con el cliente lo antes posible.</p>
    `;
    
    // Configurar opciones del correo
    const mailOptions = {
      from: EMAIL_USER,
      to: emailTo,
      subject: emailSubject,
      html: emailHtml
    };
    
    // Enviar el correo
    console.log(`üìß Enviando notificaci√≥n por correo a ${emailTo}...`);
    const info = await mailTransport.sendMail(mailOptions);
    
    console.log(`‚úÖ Notificaci√≥n enviada: ${info.messageId}`);
    return true;
  } catch (error) {
    console.error(`‚ùå Error enviando notificaci√≥n por correo: ${error.message}`);
    return false;
  }
}

/**
 * Repara los mensajes en la base de datos corrigiendo los sender_type incorrectos.
 * Esta funci√≥n analiza el contenido para detectar mensajes que probablemente sean del bot/dashboard pero tienen sender_type='user'.
 * @returns {Promise<Object>} Resultado de la operaci√≥n con estad√≠sticas
 */
async function fixMessagesInDatabase() {
  if (!supabase) {
    console.error('‚ùå No hay conexi√≥n a Supabase, no se pueden reparar los mensajes');
    return { success: false, error: 'No hay conexi√≥n a Supabase' };
  }

  try {
    console.log('üîß Iniciando reparaci√≥n de mensajes en la base de datos...');
    
    // 1. Obtener mensajes que tienen sender_type='user'
    const { data: suspectMessages, error: selectError } = await supabase
      .from('messages')
      .select('*')
      .eq('sender_type', 'user');
    
    if (selectError) {
      console.error(`‚ùå Error al consultar mensajes: ${selectError.message}`);
      return { success: false, error: selectError.message };
    }
    
    console.log(`‚ÑπÔ∏è Encontrados ${suspectMessages.length} mensajes con sender_type='user' para analizar`);
    
    // Contador de mensajes
    let correctedCount = 0;
    let analyzedCount = 0;
    
    // 2. Patrones exactos que indican que un mensaje es del bot/dashboard
    const botPatterns = [
      { pattern: "¬°Perfecto!", weight: 10 },
      { pattern: "Perfecto!", weight: 10 },
      { pattern: "CUPRA Master", weight: 10 },
      { pattern: "Hola soy Hern√°n", weight: 10 },
      { pattern: "un asesor te llamar√°", weight: 10 },
      { pattern: "un asesor te contactar√°", weight: 10 },
      { pattern: "una persona te contactar√°", weight: 10 },
      { pattern: "cita ha sido confirmada", weight: 10 },
      { pattern: "CUPRA", weight: 5 },
      { pattern: "asesor te llamar√°", weight: 8 },
      { pattern: "te llamar√° a las", weight: 8 }
    ];
    
    // 3. Analizar y corregir mensajes sospechosos
    for (const msg of suspectMessages) {
      analyzedCount++;
      
      // Skip an√°lisis si no hay contenido
      if (!msg.content) {
        console.log(`‚è© Saltando mensaje sin contenido: ${msg.id.substring(0, 8)}`);
        continue;
      }
      
      // Calculando peso total para decidir si es mensaje del bot
      let score = 0;
      let matchedPatterns = [];
      
      for (const { pattern, weight } of botPatterns) {
        if (msg.content.includes(pattern)) {
          score += weight;
          matchedPatterns.push(pattern);
        }
      }
      
      // Debug de cada mensaje analizado
      console.log(`
üìù Analizando mensaje: ID=${msg.id.substring(0, 8)}
   Contenido: "${msg.content.substring(0, 60)}${msg.content.length > 60 ? '...' : ''}"
   Patrones detectados: ${matchedPatterns.length > 0 ? matchedPatterns.join(', ') : 'ninguno'}
   Puntuaci√≥n: ${score}/10
      `);
      
      // Si la puntuaci√≥n es 5 o mayor, consideramos que es un mensaje del bot
      if (score >= 5) {
        console.log(`üîÑ Corrigiendo mensaje de ID ${msg.id.substring(0, 8)}`);
        
        // Actualizar el mensaje
        const { error: updateError } = await supabase
          .from('messages')
          .update({ 
            sender_type: 'bot',
            is_from_business: true 
          })
          .eq('id', msg.id);
        
        if (updateError) {
          console.error(`‚ùå Error al actualizar mensaje ${msg.id}: ${updateError.message}`);
        } else {
          correctedCount++;
          console.log(`‚úÖ Mensaje corregido: ${msg.id.substring(0, 8)}`);
        }
      }
    }
    
    console.log(`
‚úÖ Reparaci√≥n completada:
   - Mensajes analizados: ${analyzedCount}
   - Mensajes corregidos: ${correctedCount}
   - Porcentaje corregido: ${analyzedCount > 0 ? (correctedCount / analyzedCount * 100).toFixed(2) : 0}%
    `);
    
    return { 
      success: true, 
      total: suspectMessages.length,
      analyzed: analyzedCount,
      corrected: correctedCount 
    };
  } catch (error) {
    console.error(`‚ùå Error en la reparaci√≥n de mensajes: ${error.message}`);
    return { success: false, error: error.message };
  }
}

// Si este archivo se ejecuta directamente, reparar los mensajes
if (require.main === module) {
  console.log('üîß Ejecutando script de reparaci√≥n de mensajes...');
  fixMessagesInDatabase()
    .then(result => {
      console.log('Resultado de la reparaci√≥n:', result);
      process.exit(result.success ? 0 : 1);
    })
    .catch(error => {
      console.error('Error en el script de reparaci√≥n:', error);
      process.exit(1);
    });
}

module.exports = {
  checkForNotificationPhrases,
  processMessageForNotification,
  sendBusinessNotification,
  fixMessagesInDatabase
}; 