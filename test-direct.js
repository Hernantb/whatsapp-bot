// Script para probar directamente las funciones de notificaci√≥n
require('dotenv').config();
const nodemailer = require('nodemailer');
const { createClient } = require('@supabase/supabase-js');

// Configuraci√≥n
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_KEY = process.env.SUPABASE_KEY || process.env.SUPABASE_ANON_KEY;
const BUSINESS_ID = process.env.BUSINESS_ID || '2d385aa5-40e0-4ec9-9360-19281bc605e4';
const TEST_PHONE = process.env.TEST_PHONE || '5212221192568';

// Inicializar Supabase
const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);

console.log('üöÄ Iniciando prueba directa de notificaciones por correo');
console.log(`üì± Tel√©fono de prueba: ${TEST_PHONE}`);

// Mensajes de prueba
const testMessages = [
  {
    message: "Gracias por tu consulta, te ayudar√© con informaci√≥n sobre nuestros modelos.",
    shouldNotify: false,
    description: "Mensaje regular que NO deber√≠a generar notificaci√≥n"
  },
  {
    message: "¬°Perfecto! Tu cita ha sido confirmada para hoy a las 10. Estoy aqu√≠ si requieres algo m√°s.",
    shouldNotify: true,
    description: "Mensaje con 'Perfecto! Tu cita ha sido confirmada' que DEBER√çA generar notificaci√≥n"
  },
  {
    message: "Lamento que no hayas podido venir hoy, podemos reagendar tu cita si lo deseas.",
    shouldNotify: false,
    description: "Mensaje con 'cita' pero sin frases de confirmaci√≥n, NO deber√≠a notificar"
  },
  {
    message: "¬°Perfecto! Un asesor te contactar√° pronto para resolver tus dudas sobre el Cupra Le√≥n.",
    shouldNotify: true,
    description: "Mensaje con 'Perfecto! Un asesor te contactar√°' que DEBER√çA generar notificaci√≥n"
  }
];

// Funci√≥n que verifica si un mensaje requiere notificaci√≥n
function checkForNotificationPhrases(message) {
  console.log(`üîç === VERIFICANDO FRASES PARA NOTIFICACI√ìN ===`);
  console.log(`üîç Mensaje a verificar: "${message}"`);
  
  // Asegurarse de que el mensaje es una cadena
  if (!message || typeof message !== 'string') {
    console.error(`‚ùå El mensaje no es v√°lido: ${message}`);
    return false;
  }
  
  // Normalizar mensaje (quitar acentos, convertir a min√∫sculas)
  const normalizedMessage = message.toLowerCase()
    .normalize("NFD").replace(/[\u0300-\u036f]/g, "");
  
  // Lista ampliada de frases que requieren notificaci√≥n
  const notificationPhrases = [
    "perfecto! un asesor te llamara", 
    "perfecto! un asesor te llamar√°",
    "¬°perfecto! un asesor te llamar√°",
    "¬°perfecto! un asesor te llamara",
    "perfecto un asesor te",
    "perfecto! tu cita ha sido confirmada",
    "¬°perfecto! tu cita ha sido confirmada",
    "perfecto! tu cita ha sido registrada",
    "¬°perfecto! tu cita ha sido registrada",
    "hemos registrado tu cita",
    "tu cita ha sido",
    "se ha creado la cita",
    "asesor te contactara",
    "asesor te contactar√°",
    "te contactar√°",
    "te contactara"
  ];
  
  // Lista ampliada de palabras clave para verificaci√≥n adicional
  const keyWords = [
    "cita", 
    "asesor", 
    "llamar√°", 
    "llamara",
    "contactar√°", 
    "contactara",
    "confirmada", 
    "registrada", 
    "perfecto",
    "reservada",
    "agendada"
  ];
  
  // Verificar si el mensaje contiene alguna de las frases de notificaci√≥n
  for (const phrase of notificationPhrases) {
    if (normalizedMessage.includes(phrase)) {
      console.log(`‚úÖ COINCIDENCIA EXACTA detectada con frase: "${phrase}"`);
      return true;
    }
  }
  
  // Verificar coincidencia parcial (al menos 2 palabras clave)
  let keyWordCount = 0;
  const matchedKeywords = [];
  for (const word of keyWords) {
    if (normalizedMessage.includes(word)) {
      keyWordCount++;
      matchedKeywords.push(word);
      console.log(`üîë Palabra clave "${word}" encontrada (${keyWordCount} de ${keyWords.length})`);
    }
  }
  
  if (keyWordCount >= 2) {
    console.log(`‚úÖ COINCIDENCIA PARCIAL: ${keyWordCount} palabras clave encontradas: [${matchedKeywords.join(', ')}]`);
    return true;
  }
  
  // Verificar patrones espec√≠ficos
  if (
    (normalizedMessage.includes("perfecto") && normalizedMessage.includes("asesor")) ||
    (normalizedMessage.includes("cita") && normalizedMessage.includes("confirmada")) ||
    (normalizedMessage.includes("cita") && normalizedMessage.includes("registrada")) ||
    (normalizedMessage.includes("perfecto") && normalizedMessage.includes("cita"))
  ) {
    console.log(`‚úÖ PATR√ìN ESPEC√çFICO detectado: combinaci√≥n de palabras clave`);
    return true;
  }
  
  console.log(`‚ùå No se detectaron frases que requieran notificaci√≥n`);
  return false;
}

// Funci√≥n simplificada para enviar correo electr√≥nico
async function sendEmailNotification(message, phoneNumber, conversationId) {
  try {
    console.log(`\nüìß ENVIANDO NOTIFICACI√ìN POR CORREO`);
    console.log(`üìß Mensaje: "${message}"`);
    console.log(`üìß N√∫mero: ${phoneNumber}`);
    console.log(`üìß Conversaci√≥n ID: ${conversationId}`);
    
    // Crear transporter con Gmail
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER || 'bexorai@gmail.com',
        pass: process.env.EMAIL_PASSWORD || 'gqwi aker jgrn kylf'
      }
    });
    
    // HTML del correo
    const emailHTML = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; border: 1px solid #e1e1e1; border-radius: 8px; overflow: hidden;">
        <div style="background-color: #2c3e50; color: white; padding: 20px; text-align: center;">
          <h2 style="margin: 0;">üß™ PRUEBA DE NOTIFICACI√ìN</h2>
        </div>
        
        <div style="padding: 20px;">
          <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin-bottom: 20px; border-left: 4px solid #3498db;">
            <h3 style="margin-top: 0; color: #34495e; margin-bottom: 10px;">Datos de Prueba</h3>
            <p style="margin: 0;"><strong>Tel√©fono:</strong> ${phoneNumber}</p>
            <p style="margin: 0;"><strong>ID Conversaci√≥n:</strong> ${conversationId}</p>
            <p style="margin: 0;"><strong>Fecha:</strong> ${new Date().toLocaleString()}</p>
          </div>
        
          <div style="margin-bottom: 20px;">
            <h3 style="color: #34495e; margin-bottom: 10px;">Mensaje de Prueba</h3>
            <div style="background-color: #e6f7ff; padding: 15px; border-radius: 5px; border-left: 4px solid #2196f3;">
              ${message}
            </div>
          </div>
        
          <div style="text-align: center; margin-top: 30px;">
            <p>Este es un correo de prueba enviado desde el script test-direct.js</p>
            <p>Script ejecutado a las ${new Date().toLocaleTimeString()}</p>
          </div>
        </div>
      </div>
    `;
    
    // Opciones del correo
    const mailOptions = {
      from: `"Bot WhatsApp (PRUEBA DIRECTA) ü§ñ" <${process.env.EMAIL_USER || 'bexorai@gmail.com'}>`,
      to: process.env.NOTIFICATION_EMAIL || 'joaquinisaza@hotmail.com',
      subject: `üß™ PRUEBA: Notificaci√≥n de Cliente - ${phoneNumber}`,
      html: emailHTML
    };
    
    console.log(`üìß Enviando a: ${mailOptions.to}`);
    
    // Enviar correo
    const info = await transporter.sendMail(mailOptions);
    console.log(`‚úÖ CORREO ENVIADO EXITOSAMENTE`);
    console.log(`‚úÖ ID del mensaje: ${info.messageId}`);
    
    return true;
  } catch (error) {
    console.error(`‚ùå ERROR ENVIANDO CORREO: ${error.message}`);
    console.error(error.stack);
    return false;
  }
}

// Funci√≥n para probar los mensajes
async function runTests() {
  try {
    // 1. Buscar o crear una conversaci√≥n para la prueba
    console.log('üîç Buscando conversaci√≥n existente...');
    let conversationId;
    
    try {
      const { data, error } = await supabase
        .from('conversations')
        .select('id')
        .eq('user_id', TEST_PHONE)
        .eq('business_id', BUSINESS_ID)
        .order('created_at', { ascending: false })
        .limit(1);
      
      if (data && data.length > 0) {
        conversationId = data[0].id;
        console.log(`‚úÖ Conversaci√≥n existente encontrada: ${conversationId}`);
      } else {
        console.log('‚ÑπÔ∏è No se encontr√≥ conversaci√≥n existente, creando una nueva...');
        const { data: newConv, error: createError } = await supabase
          .from('conversations')
          .insert([{
            user_id: TEST_PHONE,
            business_id: BUSINESS_ID,
            created_at: new Date().toISOString()
          }])
          .select();
        
        if (createError) {
          throw new Error(`Error creando conversaci√≥n: ${createError.message}`);
        }
        
        conversationId = newConv[0].id;
        console.log(`‚úÖ Nueva conversaci√≥n creada: ${conversationId}`);
      }
    } catch (error) {
      console.error(`‚ùå Error al gestionar conversaci√≥n: ${error.message}`);
      return;
    }
    
    // 2. Probar cada mensaje
    console.log('\n===== INICIANDO PRUEBAS DE MENSAJES =====');
    
    let successCount = 0;
    let failCount = 0;
    
    for (const [index, test] of testMessages.entries()) {
      console.log(`\nüß™ PRUEBA ${index + 1}: ${test.description}`);
      console.log(`üí¨ Mensaje: "${test.message}"`);
      
      // Verificar detecci√≥n
      const detectResult = checkForNotificationPhrases(test.message);
      
      // Evaluar resultado de detecci√≥n
      if ((detectResult && test.shouldNotify) || (!detectResult && !test.shouldNotify)) {
        console.log(`‚úÖ DETECCI√ìN CORRECTA: ${detectResult ? 'Requiere notificaci√≥n' : 'No requiere notificaci√≥n'}`);
        successCount++;
      } else {
        console.log(`‚ùå DETECCI√ìN INCORRECTA: ${detectResult ? 'Detect√≥' : 'No detect√≥'} pero ${test.shouldNotify ? 'deber√≠a' : 'no deber√≠a'} notificar`);
        failCount++;
      }
      
      // Si requiere notificaci√≥n (seg√∫n detecci√≥n real), enviar correo
      if (detectResult) {
        const emailResult = await sendEmailNotification(test.message, TEST_PHONE, conversationId);
        console.log(`üìß Env√≠o de correo: ${emailResult ? 'EXITOSO ‚úÖ' : 'FALLIDO ‚ùå'}`);
      }
      
      // Breve pausa entre pruebas
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    // Resumen de pruebas
    console.log('\n===== RESUMEN DE PRUEBAS =====');
    console.log(`‚úÖ Pruebas exitosas: ${successCount} de ${testMessages.length}`);
    console.log(`‚ùå Pruebas fallidas: ${failCount} de ${testMessages.length}`);
    
    if (failCount === 0) {
      console.log('üéâ TODAS LAS PRUEBAS PASARON EXITOSAMENTE');
    } else {
      console.log('‚ö†Ô∏è ALGUNAS PRUEBAS FALLARON, REVISA LOS LOGS');
    }
    
    console.log(`\nüîç Verifica tu correo (${process.env.NOTIFICATION_EMAIL || 'joaquinisaza@hotmail.com'}) para las notificaciones enviadas`);
    
  } catch (error) {
    console.error('‚ùå ERROR GENERAL:', error);
    console.error(error.stack);
  }
}

// Ejecutar las pruebas
runTests(); 