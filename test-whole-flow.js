// Script para probar el flujo completo de env√≠o de mensajes y notificaciones
require('dotenv').config();
const { sendBusinessNotification, checkForNotificationPhrases } = require('./index.js');
const { sendTextMessageGupShup } = require('./sendTextMessageGupShup');
const { createClient } = require('@supabase/supabase-js');

// Configuraci√≥n
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_KEY = process.env.SUPABASE_KEY || process.env.SUPABASE_ANON_KEY;
const BUSINESS_ID = process.env.BUSINESS_ID || '2d385aa5-40e0-4ec9-9360-19281bc605e4';
const TEST_PHONE = process.env.TEST_PHONE || '5212221192568';

// Inicializar Supabase
const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);

// Mapeo bidireccional para mantener relaci√≥n entre n√∫meros telef√≥nicos e IDs de conversaci√≥n
const phoneToConversationMap = {};
// Mapeo de IDs de conversaci√≥n a n√∫meros telef√≥nicos
const conversationIdToPhoneMap = {};

console.log('üöÄ Iniciando prueba de flujo completo');
console.log(`üì± Tel√©fono de prueba: ${TEST_PHONE}`);

// Funci√≥n principal para probar el flujo completo
async function testFullFlow() {
  try {
    // 1. Buscar o crear una conversaci√≥n para la prueba
    console.log('üîç Buscando conversaci√≥n existente...');
    let conversationId;
    
    try {
      const { data, error } = await supabase
        .from('conversations')
        .select('id')
        .eq('user_id', TEST_PHONE)
        .eq('business_id', BUSINESS_ID)
        .order('created_at', { ascending: false })
        .limit(1);
      
      if (data && data.length > 0) {
        conversationId = data[0].id;
        console.log(`‚úÖ Conversaci√≥n existente encontrada: ${conversationId}`);
      } else {
        console.log('‚ÑπÔ∏è No se encontr√≥ conversaci√≥n existente, creando una nueva...');
        const { data: newConv, error: createError } = await supabase
          .from('conversations')
          .insert([{
            user_id: TEST_PHONE,
            business_id: BUSINESS_ID,
            created_at: new Date().toISOString()
          }])
          .select();
        
        if (createError) {
          throw new Error(`Error creando conversaci√≥n: ${createError.message}`);
        }
        
        conversationId = newConv[0].id;
        console.log(`‚úÖ Nueva conversaci√≥n creada: ${conversationId}`);
      }
      
      // Actualizar mapeos
      phoneToConversationMap[TEST_PHONE] = conversationId;
      conversationIdToPhoneMap[conversationId] = TEST_PHONE;
      
    } catch (error) {
      console.error(`‚ùå Error al gestionar conversaci√≥n: ${error.message}`);
      return;
    }
    
    // 2. Crear mensajes de prueba
    const testMessages = [
      "Gracias por tu consulta, te ayudar√© con informaci√≥n sobre nuestros modelos.",
      "¬°Perfecto! Tu cita ha sido confirmada para hoy a las 10. Estoy aqu√≠ si requieres algo m√°s.",
      "Lamento que no hayas podido venir hoy, podemos reagendar tu cita si lo deseas.",
      "¬°Perfecto! Un asesor te contactar√° pronto para resolver tus dudas sobre el Cupra Le√≥n."
    ];
    
    // 3. Probar cada mensaje
    console.log('\n===== INICIANDO PRUEBAS DE MENSAJES =====');
    
    for (const [index, message] of testMessages.entries()) {
      console.log(`\nüß™ PRUEBA ${index + 1}: "${message.substring(0, 30)}..."`);
      
      // Verificar si requiere notificaci√≥n
      console.log('üîç Verificando si requiere notificaci√≥n...');
      const requiresNotification = checkForNotificationPhrases(message);
      console.log(`üîç Resultado: ${requiresNotification ? '‚úÖ REQUIERE NOTIFICACI√ìN' : '‚ùå NO REQUIERE NOTIFICACI√ìN'}`);
      
      // Simular env√≠o de mensaje (sin enviar realmente a WhatsApp)
      console.log('üí¨ Simulando env√≠o a WhatsApp...');
      // Comentar la siguiente l√≠nea para no enviar realmente a WhatsApp
      // const whatsappResult = await sendTextMessageGupShup(TEST_PHONE, message);
      console.log('‚úÖ Mensaje simulado enviado a WhatsApp');
      
      // Si requiere notificaci√≥n, enviar correo
      if (requiresNotification) {
        console.log('üìß Mensaje requiere notificaci√≥n, enviando correo...');
        try {
          const result = await sendBusinessNotification(conversationId, message, TEST_PHONE);
          console.log(`üìß Resultado de notificaci√≥n: ${result ? '‚úÖ ENVIADA EXITOSAMENTE' : '‚ùå FALL√ì EL ENV√çO'}`);
        } catch (error) {
          console.error(`‚ùå Error enviando notificaci√≥n: ${error.message}`);
        }
      }
      
      // Simular registro en base de datos
      console.log('üóÑÔ∏è Simulando registro en base de datos...');
      try {
        const { data, error } = await supabase
          .from('messages')
          .insert([{
            conversation_id: conversationId,
            content: message,
            sender_type: 'bot',
            created_at: new Date().toISOString(),
            business_id: BUSINESS_ID,
            sent_to_whatsapp: true
          }])
          .select();
        
        if (error) {
          console.error(`‚ùå Error registrando mensaje: ${error.message}`);
        } else {
          console.log(`‚úÖ Mensaje registrado en base de datos, ID: ${data[0].id}`);
        }
      } catch (dbError) {
        console.error(`‚ùå Error de base de datos: ${dbError.message}`);
      }
      
      // Breve pausa entre mensajes
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
    
    console.log('\n‚úÖ PRUEBAS COMPLETADAS EXITOSAMENTE');
    console.log(`üìä Total mensajes probados: ${testMessages.length}`);
    console.log(`üîç Verifica tu correo (${process.env.NOTIFICATION_EMAIL || 'joaquinisaza@hotmail.com'}) para las notificaciones`);
    
  } catch (error) {
    console.error('‚ùå ERROR GENERAL:', error);
    console.error(error.stack);
  }
}

// Ejecutar la prueba
testFullFlow(); 